!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_SIZE	quectel_common.h	14;"	d
ASYNC_HDLC_ESC	serialif.cpp	21;"	d	file:
ASYNC_HDLC_ESC_MASK	serialif.cpp	22;"	d	file:
ASYNC_HDLC_FLAG	serialif.cpp	20;"	d	file:
ATCHANNEL_H	atchannel.h	19;"	d
ATCommandType	atchannel.h	/^} ATCommandType;$/;"	t	typeref:enum:__anon1
ATLine	atchannel.h	/^typedef struct ATLine  {$/;"	s
ATLine	atchannel.h	/^} ATLine;$/;"	t	typeref:struct:ATLine
ATLine::line	atchannel.h	/^    char *line;$/;"	m	struct:ATLine	access:public
ATLine::p_next	atchannel.h	/^    struct ATLine *p_next;$/;"	m	struct:ATLine	typeref:struct:ATLine::ATLine	access:public
ATResponse	atchannel.h	/^} ATResponse;$/;"	t	typeref:struct:__anon2
ATUnsolHandler	atchannel.h	/^typedef void (*ATUnsolHandler)(const char *s, const char *sms_pdu);$/;"	t
AT_CME_Error	atchannel.h	/^} AT_CME_Error;$/;"	t	typeref:enum:__anon3
AT_DEBUG	atchannel.h	26;"	d
AT_DUMP	atchannel.cpp	/^void  AT_DUMP(const char*  prefix, const char*  buff, int  len) {$/;"	f	signature:(const char* prefix, const char* buff, int len)
AT_DUMP	atchannel.h	/^extern void  AT_DUMP(const char* prefix, const char*  buff, int  len);$/;"	p	signature:(const char* prefix, const char* buff, int len)
AT_DUMP	atchannel.h	31;"	d
AT_ERROR_CHANNEL_CLOSED	atchannel.h	36;"	d
AT_ERROR_COMMAND_PENDING	atchannel.h	35;"	d
AT_ERROR_GENERIC	atchannel.h	34;"	d
AT_ERROR_INVALID_RESPONSE	atchannel.h	41;"	d
AT_ERROR_INVALID_THREAD	atchannel.h	38;"	d
AT_ERROR_TIMEOUT	atchannel.h	37;"	d
AT_TOK_H	at_tok.h	19;"	d
Accept	tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlComment	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlDeclaration	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlDocument	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlElement	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlText	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlUnknown	signature:( TiXmlVisitor* visitor ) const
Action	fastboot/engine.c	/^struct Action {$/;"	s	file:
Action	fastboot/engine.c	/^typedef struct Action Action;$/;"	t	typeref:struct:Action	file:
Action::cmd	fastboot/engine.c	/^    char cmd[64];$/;"	m	struct:Action	file:	access:public
Action::data	fastboot/engine.c	/^    void *data;$/;"	m	struct:Action	file:	access:public
Action::fd	fastboot/engine.c	/^    int fd;$/;"	m	struct:Action	file:	access:public
Action::func	fastboot/engine.c	/^    int (*func)(Action *a, int status, char *resp);$/;"	m	struct:Action	file:	access:public
Action::msg	fastboot/engine.c	/^    const char *msg;$/;"	m	struct:Action	file:	access:public
Action::next	fastboot/engine.c	/^    Action *next;$/;"	m	struct:Action	file:	access:public
Action::op	fastboot/engine.c	/^    unsigned op;$/;"	m	struct:Action	file:	access:public
Action::prod	fastboot/engine.c	/^    const char *prod;$/;"	m	struct:Action	file:	access:public
Action::size	fastboot/engine.c	/^    unsigned size;$/;"	m	struct:Action	file:	access:public
Action::start	fastboot/engine.c	/^    double start;$/;"	m	struct:Action	file:	access:public
Add	tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe ) {$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* addMe )
AlwaysValidate	firehose/firehose_protocol.c	/^    uint32_t AlwaysValidate;$/;"	m	struct:fh_configure_cmd	file:	access:public
Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const {$/;"	f	class:TiXmlElement	signature:( const char* name ) const
Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, double* d ) const
Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, int* i ) const
Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const {$/;"	f	class:TiXmlElement	signature:( const std::string& name ) const
Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const {$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* d ) const
Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const {$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* i ) const
BFastbootModel	download.cpp	/^int BFastbootModel() {$/;"	f	signature:()
BOOL	platform_def.h	/^typedef bool  			   BOOL;$/;"	t
BULK_SIZE	fastboot/usb_linux_fastboot.c	371;"	d	file:
Blank	tinyxmlparser.cpp	/^bool TiXmlText::Blank() const {$/;"	f	class:TiXmlText	signature:() const
CME_ERROR_NON_CME	atchannel.h	/^    CME_ERROR_NON_CME = -1,$/;"	e	enum:__anon3
CME_SIM_NOT_INSERTED	atchannel.h	/^    CME_SIM_NOT_INSERTED = 10$/;"	e	enum:__anon3
CME_SUCCESS	atchannel.h	/^    CME_SUCCESS = 0,$/;"	e	enum:__anon3
CRC_16_L_POLYNOMIAL	quectel_crc.h	7;"	d
CRC_16_L_SEED	quectel_crc.h	5;"	d
CRC_TAB_SIZE	quectel_crc.h	6;"	d
Child	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const {$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
Child	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const {$/;"	f	class:TiXmlHandle	signature:( int count ) const
ChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const {$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
ChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const {$/;"	f	class:TiXmlHandle	signature:( int count ) const
Clear	tinyxml.cpp	/^void TiXmlNode::Clear() {$/;"	f	class:TiXmlNode	signature:()
Clear	tinyxml.h	/^    void Clear()		{$/;"	f	struct:TiXmlCursor	access:public
ClearThis	tinyxml.cpp	/^void TiXmlElement::ClearThis() {$/;"	f	class:TiXmlElement	signature:()
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const {$/;"	f	class:TiXmlComment	signature:() const
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const {$/;"	f	class:TiXmlDeclaration	signature:() const
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const {$/;"	f	class:TiXmlDocument	signature:() const
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const {$/;"	f	class:TiXmlElement	signature:() const
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const {$/;"	f	class:TiXmlText	signature:() const
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const {$/;"	f	class:TiXmlUnknown	signature:() const
Command	serialif.h	/^    uint32 Command;$/;"	m	struct:__anon26	access:public
Command	serialif.h	/^    uint32 Command;$/;"	m	struct:__anon27	access:public
Command	serialif.h	/^    uint32 Command;$/;"	m	struct:__anon28	access:public
Command	serialif.h	/^    uint32 Command;$/;"	m	struct:__anon29	access:public
CommandPacketLength	serialif.h	/^    uint32 CommandPacketLength;$/;"	m	struct:__anon27	access:public
ConvertUTF32ToUTF8	tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length ) {$/;"	f	class:TiXmlBase	signature:( unsigned long input, char* output, int* length )
CopyTo	tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const {$/;"	f	class:TiXmlComment	signature:( TiXmlComment* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const {$/;"	f	class:TiXmlDeclaration	signature:( TiXmlDeclaration* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const {$/;"	f	class:TiXmlDocument	signature:( TiXmlDocument* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const {$/;"	f	class:TiXmlElement	signature:( TiXmlElement* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const {$/;"	f	class:TiXmlText	signature:( TiXmlText* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const {$/;"	f	class:TiXmlUnknown	signature:( TiXmlUnknown* target ) const
CreateDir	fastboot/usb_linux_fastboot.c	/^int  CreateDir(const   char   *sPathName) {$/;"	f	signature:(const char *sPathName)
CreateDir	firehose/usb_linux.c	/^static int CreateDir(const char *sPathName) {$/;"	f	file:	signature:(const char *sPathName)
CreateDir	quectel_common.cpp	/^static int  CreateDir(const   char   *sPathName) {$/;"	f	file:	signature:(const char *sPathName)
Cursor	tinyxmlparser.cpp	/^    const TiXmlCursor& Cursor() const	{$/;"	f	class:TiXmlParsingData	access:public	signature:() const
DBG	fastboot/usb_linux_fastboot.c	60;"	d	file:
DBG	fastboot/usb_linux_fastboot.c	62;"	d	file:
DBG1	fastboot/usb_linux_fastboot.c	59;"	d	file:
DBG1	fastboot/usb_linux_fastboot.c	63;"	d	file:
DEBUG	tinyxml.h	43;"	d
DETECT_DEV_TIMEOUT	download.h	92;"	d
DONE_RESONSE_PACKET	serialif.h	83;"	d
DataLength	serialif.h	/^    uint32 DataLength;$/;"	m	struct:__anon28	access:public
DataOffset	serialif.h	/^    uint32 DataOffset;$/;"	m	struct:__anon28	access:public
DoubleValue	tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const {$/;"	f	class:TiXmlAttribute	signature:() const
EC20_MAX_INF	firehose/usb2tcp.c	34;"	d	file:
EC20_MAX_INF	firehose/usb_linux.c	33;"	d	file:
EC20_MAX_INF	firehose/usb_linux_firehose.c	37;"	d	file:
END_IMAGE_TRNSER_PACKET	serialif.h	82;"	d
ENPRG_path	download.h	/^    char *ENPRG_path;$/;"	m	struct:__anon7	access:public
ERROR	fastboot/protocol.c	/^static char ERROR[128];$/;"	v	file:
EncodeString	tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString ) {$/;"	f	class:TiXmlBase	signature:( const TIXML_STRING& str, TIXML_STRING* outString )
F	md5.cpp	7;"	d	file:
FASTBOOT	quectel_common.h	9;"	d
FASTBOOT_SAHARA	quectel_common.h	7;"	d
FB_COMMAND_SZ	fastboot/fastboot.h	41;"	d
FB_RESPONSE_SZ	fastboot/fastboot.h	42;"	d
FIREHOSE	quectel_common.h	10;"	d
FREE_SOURCE	download.cpp	187;"	d	file:
Find	tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const {$/;"	f	class:TiXmlAttributeSet	signature:( const char* name ) const
Find	tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const {$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& name ) const
FindOrCreate	tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const char* _name ) {$/;"	f	class:TiXmlAttributeSet	signature:( const char* _name )
FindOrCreate	tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const std::string& _name ) {$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& _name )
FirstChild	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const {$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
FirstChild	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const {$/;"	f	class:TiXmlHandle	signature:() const
FirstChild	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
FirstChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const {$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
FirstChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const {$/;"	f	class:TiXmlHandle	signature:() const
FirstChildElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
FirstChildElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const {$/;"	f	class:TiXmlNode	signature:() const
G	md5.cpp	8;"	d	file:
GET	md5.cpp	22;"	d	file:
GET	md5.cpp	31;"	d	file:
GET_DATA_PACKET	serialif.h	81;"	d
GET_HELLO_PACKET	serialif.h	77;"	d
GetDocument	tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const {$/;"	f	class:TiXmlNode	signature:() const
GetEntity	tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlBase	signature:( const char* p, char* value, int* length, TiXmlEncoding encoding )
GetNodePointerByName	file.cpp	/^bool GetNodePointerByName(TiXmlElement* pRootEle,const char* strNodeName,TiXmlElement* &Node) {$/;"	f	signature:(TiXmlElement* pRootEle,const char* strNodeName,TiXmlElement* &Node)
GetReadDataPacket	serialif.cpp	/^int GetReadDataPacket(int *emergency_mode, int max_pkt_sz) {$/;"	f	signature:(int *emergency_mode, int max_pkt_sz)
GetReadDataPacket	serialif.h	/^int GetReadDataPacket(int *emergency_mode, int maxpkt = (1024 * 4));$/;"	p	signature:(int *emergency_mode, int maxpkt = (1024 * 4))
GetText	tinyxml.cpp	/^const char* TiXmlElement::GetText() const {$/;"	f	class:TiXmlElement	signature:() const
GetTickCount	serialif.cpp	/^unsigned long GetTickCount() {$/;"	f	signature:()
H	md5.cpp	9;"	d	file:
H2	md5.cpp	10;"	d	file:
HANDSHAKE_RETRY_COUNT	atchannel.cpp	76;"	d	file:
HANDSHAKE_TIMEOUT_MSEC	atchannel.cpp	77;"	d	file:
HELLO_RESPONSE_PACKET	serialif.h	80;"	d
HELLO_RESPONSE_PACKET_LENGTH	serialif.h	84;"	d
I	md5.cpp	11;"	d	file:
Identify	tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlNode	signature:( const char* p, TiXmlEncoding encoding )
ImageID	serialif.h	/^    uint32 ImageID;$/;"	m	struct:__anon26	access:public
ImageID	serialif.h	/^    uint32 ImageID;$/;"	m	struct:__anon28	access:public
InsertAfterChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis ) {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
InsertBeforeChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis ) {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
InsertEndChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis ) {$/;"	f	class:TiXmlNode	signature:( const TiXmlNode& addThis )
IntValue	tinyxml.cpp	/^int TiXmlAttribute::IntValue() const {$/;"	f	class:TiXmlAttribute	signature:() const
IsAlpha	tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ ) {$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
IsAlphaNum	tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ ) {$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
IterateChildren	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const {$/;"	f	class:TiXmlNode	signature:( const TiXmlNode* previous ) const
IterateChildren	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const {$/;"	f	class:TiXmlNode	signature:( const char * val, const TiXmlNode* previous ) const
LINE_BYTES	file.cpp	161;"	d	file:
LOCKFILE	quectel_common.h	5;"	d
LOCKMODE	quectel_common.cpp	13;"	d	file:
LOGD	atchannel.h	124;"	d
LOGD	atchannel.h	127;"	d
LOGE	atchannel.h	125;"	d
LOGE	atchannel.h	128;"	d
LOW_COMP_VERSON_NUM	serialif.h	78;"	d
LastChild	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
Length	serialif.h	/^    uint32 Length;$/;"	m	struct:__anon26	access:public
Length	serialif.h	/^    uint32 Length;$/;"	m	struct:__anon27	access:public
Length	serialif.h	/^    uint32 Length;$/;"	m	struct:__anon28	access:public
Length	serialif.h	/^    uint32 Length;$/;"	m	struct:__anon29	access:public
LinkEndChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node ) {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* node )
LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlDocument	signature:( FILE* file, TiXmlEncoding encoding )
LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding ) {$/;"	f	class:TiXmlDocument	signature:( TiXmlEncoding encoding )
LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlDocument	signature:( const char* _filename, TiXmlEncoding encoding )
MAJOR	os_linux.cpp	11;"	d	file:
MAX_AT_RESPONSE	atchannel.cpp	75;"	d	file:
MAX_OPTIONS	fastboot/fastboot.c	297;"	d	file:
MAX_PATH	download.h	11;"	d
MAX_PATH	os_linux.cpp	22;"	d	file:
MAX_PATH	quectel_common.h	52;"	d
MAX_RECEIVE_BUFFER_SIZE	serialif.cpp	23;"	d	file:
MAX_RETRIES	fastboot/usb_linux_fastboot.c	56;"	d	file:
MAX_RETRY_CNT_FOR_RECV_PKT	serialif.cpp	111;"	d	file:
MAX_SEND_BUFFER_SIZE	serialif.cpp	24;"	d	file:
MAX_TIMEOUT_FOR_RECV_PKT	serialif.cpp	110;"	d	file:
MAX_TRACE_LENGTH	os_linux.cpp	21;"	d	file:
MAX_USBFS_BULK_IN_SIZE	firehose/usb2tcp.c	32;"	d	file:
MAX_USBFS_BULK_IN_SIZE	firehose/usb_linux.c	31;"	d	file:
MAX_USBFS_BULK_IN_SIZE	firehose/usb_linux_firehose.c	35;"	d	file:
MAX_USBFS_BULK_OUT_SIZE	firehose/usb2tcp.c	33;"	d	file:
MAX_USBFS_BULK_OUT_SIZE	firehose/usb_linux.c	32;"	d	file:
MAX_USBFS_BULK_OUT_SIZE	firehose/usb_linux_firehose.c	36;"	d	file:
MAX_USBFS_BULK_SIZE	fastboot/usb_linux_fastboot.c	78;"	d	file:
MIN	firehose/usb2tcp.c	28;"	d	file:
MIN	firehose/usb_linux.h	32;"	d
MIN	firehose/usb_linux_firehose.c	31;"	d	file:
MINOR	os_linux.cpp	12;"	d	file:
MISC_PARTITION_LENGTH	download.cpp	28;"	d	file:
MKDEV	fastboot/usb_linux_fastboot.c	71;"	d	file:
MKDEV	firehose/usb_linux.c	34;"	d	file:
MKDEV	quectel_common.cpp	8;"	d	file:
MULTILINE	atchannel.h	/^    MULTILINE    \/* multiple line intermediate response$/;"	e	enum:__anon1
MaxDigestTableSizeInBytes	firehose/firehose_protocol.c	/^    uint32_t MaxDigestTableSizeInBytes;$/;"	m	struct:fh_configure_cmd	file:	access:public
MaxPayloadSizeFromTargetInBytes	firehose/firehose_protocol.c	/^    uint32_t MaxPayloadSizeFromTargetInBytes ; 			\/\/2048$/;"	m	struct:fh_configure_cmd	file:	access:public
MaxPayloadSizeToTargetInByteSupported	firehose/firehose_protocol.c	/^    uint32_t MaxPayloadSizeToTargetInByteSupported;		\/\/16k$/;"	m	struct:fh_configure_cmd	file:	access:public
MaxPayloadSizeToTargetInBytes	firehose/firehose_protocol.c	/^    uint32_t MaxPayloadSizeToTargetInBytes;$/;"	m	struct:fh_configure_cmd	file:	access:public
MaxPayloadSizeToTargetInBytes	firehose/firehose_protocol.c	/^    uint32_t MaxPayloadSizeToTargetInBytes;$/;"	m	struct:fh_response_cmd	file:	access:public
MaxPayloadSizeToTargetInBytes	firehose/firehose_protocol.c	/^    unsigned MaxPayloadSizeToTargetInBytes;$/;"	m	struct:fh_data	file:	access:public
MemoryName	firehose/firehose_protocol.c	/^    const char *MemoryName;$/;"	m	struct:fh_configure_cmd	file:	access:public
Mode	serialif.h	/^    uint32 Mode;$/;"	m	struct:__anon27	access:public
NO_RESULT	atchannel.h	/^    NO_RESULT,   \/* no intermediate response expected *\/$/;"	e	enum:__anon1
NPRG_path	download.h	/^    char *NPRG_path;$/;"	m	struct:__anon7	access:public
NUMERIC	atchannel.h	/^    NUMERIC,     \/* a single intermediate response starting with a 0-9 *\/$/;"	e	enum:__anon1
NUM_ELEMS	atchannel.cpp	73;"	d	file:
Next	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const {$/;"	f	class:TiXmlAttribute	signature:() const
NextSibling	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
NextSiblingElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
NextSiblingElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const {$/;"	f	class:TiXmlNode	signature:() const
OP_COMMAND	fastboot/engine.c	58;"	d	file:
OP_DOWNLOAD	fastboot/engine.c	57;"	d	file:
OP_NOTICE	fastboot/engine.c	60;"	d	file:
OP_QUERY	fastboot/engine.c	59;"	d	file:
PAGES_PER_BLOCK	firehose/firehose_protocol.c	/^    uint32_t PAGES_PER_BLOCK;$/;"	m	struct:fh_erase_cmd	file:	access:public
PAGES_PER_BLOCK	firehose/firehose_protocol.c	/^    uint32_t PAGES_PER_BLOCK;$/;"	m	struct:fh_program_cmd	file:	access:public
PKT_SIZE	serialif.cpp	1219;"	d	file:
PORT_NAME_PREFIX	os_linux.cpp	/^const char PORT_NAME_PREFIX[] = "\/dev\/ttyUSB";$/;"	v
Parse	tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlAttribute	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlComment	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding ) {$/;"	f	class:TiXmlDeclaration	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlDocument	signature:( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlText	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlUnknown	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Previous	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const {$/;"	f	class:TiXmlAttribute	signature:() const
PreviousSibling	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
Print	tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const {$/;"	f	class:TiXmlAttribute	signature:( FILE* cfile, int , TIXML_STRING* str ) const
Print	tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlComment	signature:( FILE* cfile, int depth ) const
Print	tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const {$/;"	f	class:TiXmlDeclaration	signature:( FILE* cfile, int , TIXML_STRING* str ) const
Print	tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDocument	signature:( FILE* cfile, int depth ) const
Print	tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlElement	signature:( FILE* cfile, int depth ) const
Print	tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlText	signature:( FILE* cfile, int depth ) const
Print	tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlUnknown	signature:( FILE* cfile, int depth ) const
ProcessInit	download.cpp	/^int ProcessInit(download_context *pQdlContext) {$/;"	f	signature:(download_context *pQdlContext)
ProcessInit	download.h	/^int ProcessInit(download_context *pQdlContext);$/;"	p	signature:(download_context *pQdlContext)
ProcessUninit	download.cpp	/^int ProcessUninit(download_context *pQdlContext) {$/;"	f	signature:(download_context *pQdlContext)
ProcessUninit	download.h	/^int ProcessUninit(download_context *pQdlContext);$/;"	p	signature:(download_context *pQdlContext)
Processing	download.h	/^void Processing(download_context *pQdlContext);$/;"	p	signature:(download_context *pQdlContext)
QDL_LOGFILE_NAME	download.h	77;"	d
QL_MAX_INF	download.cpp	412;"	d	file:
QUECTEL_COMM_H	quectel_common.h	2;"	d
QUECTEL_CRC_H	quectel_crc.h	2;"	d
QUECTEL_LOG_H	fastboot/quectel_log.h	2;"	d
QUECTEL_LOG_H	quectel_log.h	2;"	d
QdlContext	os_linux.cpp	/^download_context *QdlContext = &s_QdlContext;$/;"	v
QueryBoolAttribute	tinyxml.cpp	/^int TiXmlElement::QueryBoolAttribute( const char* name, bool* bval ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, bool* bval ) const
QueryDoubleAttribute	tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, double* dval ) const
QueryDoubleAttribute	tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const {$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* dval ) const
QueryDoubleValue	tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const {$/;"	f	class:TiXmlAttribute	signature:( double* dval ) const
QueryIntAttribute	tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, int* ival ) const
QueryIntAttribute	tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const {$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* ival ) const
QueryIntValue	tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const {$/;"	f	class:TiXmlAttribute	signature:( int* ival ) const
QueryUnsignedAttribute	tinyxml.cpp	/^int TiXmlElement::QueryUnsignedAttribute( const char* name, unsigned* value ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, unsigned* value ) const
RAM_FIXED_VALUE	fastboot/fastboot.c	107;"	d	file:
RESET_PACKET	serialif.h	85;"	d
REVISION	os_linux.cpp	13;"	d	file:
ReadABuffer	os_linux.cpp	/^int ReadABuffer(int file, unsigned char * lpBuf, int dwToRead, int timeout) {$/;"	f	signature:(int file, unsigned char * lpBuf, int dwToRead, int timeout)
ReadABuffer	os_linux.h	/^int ReadABuffer(int file, unsigned char * lpBuf, int dwToRead, int timeout = 2);$/;"	p	signature:(int file, unsigned char * lpBuf, int dwToRead, int timeout = 2)
ReadName	tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )
ReadSAHARABuffer	serialif.cpp	/^int ReadSAHARABuffer(int file, unsigned char * lpBuf, int dwToRead) {$/;"	f	signature:(int file, unsigned char * lpBuf, int dwToRead)
ReadSAHARABuffer	serialif.h	/^int ReadSAHARABuffer(int file, unsigned char * lpBuf, int dwToRead);$/;"	p	signature:(int file, unsigned char * lpBuf, int dwToRead)
ReadText	tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(	const char* p,$/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * text, bool trimWhiteSpace, const char* endTag, bool caseInsensitive, TiXmlEncoding encoding )
ReadValue	tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Remove	tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe ) {$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* removeMe )
RemoveAttribute	tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name ) {$/;"	f	class:TiXmlElement	signature:( const char * name )
RemoveChild	tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis ) {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* removeThis )
ReplaceChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis ) {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
Reserved	serialif.h	/^    uint32 Reserved[6];$/;"	m	struct:__anon27	access:public
Resolve_port	download.cpp	/^void Resolve_port(char *chPort,int* nPort ) {$/;"	f	signature:(char *chPort,int* nPort )
Resolve_port	download.h	/^void Resolve_port(char *chPort,int* nPort );$/;"	p	signature:(char *chPort,int* nPort )
SAHARA_64_BITS_MEMORY_DEBUG_ID	firehose/sahara_protocol.h	/^    SAHARA_64_BITS_MEMORY_DEBUG_ID	= 0x10, \/\/ sent from target to host$/;"	e	enum:__anon9
SAHARA_64_BITS_MEMORY_DEBUG_ID	serialif.h	/^    SAHARA_64_BITS_MEMORY_DEBUG_ID	= 0x10, \/\/ sent from target to host$/;"	e	enum:__anon30
SAHARA_64_BITS_MEMORY_READ_ID	firehose/sahara_protocol.h	/^    SAHARA_64_BITS_MEMORY_READ_ID		= 0x11, \/\/ sent from host to target$/;"	e	enum:__anon9
SAHARA_64_BITS_MEMORY_READ_ID	serialif.h	/^    SAHARA_64_BITS_MEMORY_READ_ID		= 0x11, \/\/ sent from host to target$/;"	e	enum:__anon30
SAHARA_64_BITS_READ_DATA_ID	firehose/sahara_protocol.h	/^    SAHARA_64_BITS_READ_DATA_ID		= 0x12,$/;"	e	enum:__anon9
SAHARA_64_BITS_READ_DATA_ID	serialif.h	/^    SAHARA_64_BITS_READ_DATA_ID		= 0x12,  \/\/ place all new commands above this$/;"	e	enum:__anon30
SAHARA_CMD_EXEC_DATA_ID	firehose/sahara_protocol.h	/^    SAHARA_CMD_EXEC_DATA_ID   = 0x0F, \/\/ sent from host to target$/;"	e	enum:__anon9
SAHARA_CMD_EXEC_DATA_ID	serialif.h	/^    SAHARA_CMD_EXEC_DATA_ID   = 0x0F, \/\/ sent from host to target$/;"	e	enum:__anon30
SAHARA_CMD_EXEC_ID	firehose/sahara_protocol.h	/^    SAHARA_CMD_EXEC_ID        = 0x0D, \/\/ sent from host to target$/;"	e	enum:__anon9
SAHARA_CMD_EXEC_ID	serialif.h	/^    SAHARA_CMD_EXEC_ID        = 0x0D, \/\/ sent from host to target$/;"	e	enum:__anon30
SAHARA_CMD_EXEC_RESP_ID	firehose/sahara_protocol.h	/^    SAHARA_CMD_EXEC_RESP_ID   = 0x0E, \/\/ sent from target to host$/;"	e	enum:__anon9
SAHARA_CMD_EXEC_RESP_ID	serialif.h	/^    SAHARA_CMD_EXEC_RESP_ID   = 0x0E, \/\/ sent from target to host$/;"	e	enum:__anon30
SAHARA_CMD_READY_ID	firehose/sahara_protocol.h	/^    SAHARA_CMD_READY_ID       = 0x0B, \/\/ sent from target to host$/;"	e	enum:__anon9
SAHARA_CMD_READY_ID	serialif.h	/^    SAHARA_CMD_READY_ID       = 0x0B, \/\/ sent from target to host$/;"	e	enum:__anon30
SAHARA_CMD_SWITCH_MODE_ID	firehose/sahara_protocol.h	/^    SAHARA_CMD_SWITCH_MODE_ID = 0x0C, \/\/ sent from host to target$/;"	e	enum:__anon9
SAHARA_CMD_SWITCH_MODE_ID	serialif.h	/^    SAHARA_CMD_SWITCH_MODE_ID = 0x0C, \/\/ sent from host to target$/;"	e	enum:__anon30
SAHARA_DONE_ID	firehose/sahara_protocol.h	/^    SAHARA_DONE_ID            = 0x05, \/\/ sent from host to target$/;"	e	enum:__anon9
SAHARA_DONE_ID	serialif.h	/^    SAHARA_DONE_ID            = 0x05, \/\/ sent from host to target$/;"	e	enum:__anon30
SAHARA_DONE_RESP_ID	firehose/sahara_protocol.h	/^    SAHARA_DONE_RESP_ID       = 0x06, \/\/ sent from target to host$/;"	e	enum:__anon9
SAHARA_DONE_RESP_ID	serialif.h	/^    SAHARA_DONE_RESP_ID       = 0x06, \/\/ sent from target to host$/;"	e	enum:__anon30
SAHARA_END_IMAGE_TX_ID	firehose/sahara_protocol.h	/^    SAHARA_END_IMAGE_TX_ID    = 0x04, \/\/ sent from target to host$/;"	e	enum:__anon9
SAHARA_END_IMAGE_TX_ID	serialif.h	/^    SAHARA_END_IMAGE_TX_ID    = 0x04, \/\/ sent from target to host$/;"	e	enum:__anon30
SAHARA_EXEC_CMD_LAST	firehose/sahara_protocol.h	/^    SAHARA_EXEC_CMD_LAST,$/;"	e	enum:__anon13
SAHARA_EXEC_CMD_MAX	firehose/sahara_protocol.h	/^    SAHARA_EXEC_CMD_MAX = 0x7FFFFFFF$/;"	e	enum:__anon13
SAHARA_EXEC_CMD_MSM_HW_ID_READ	firehose/sahara_protocol.h	/^    SAHARA_EXEC_CMD_MSM_HW_ID_READ   = 0x02,$/;"	e	enum:__anon13
SAHARA_EXEC_CMD_NOP	firehose/sahara_protocol.h	/^    SAHARA_EXEC_CMD_NOP              = 0x00,$/;"	e	enum:__anon13
SAHARA_EXEC_CMD_OEM_PK_HASH_READ	firehose/sahara_protocol.h	/^    SAHARA_EXEC_CMD_OEM_PK_HASH_READ = 0x03,$/;"	e	enum:__anon13
SAHARA_EXEC_CMD_READ_DEBUG_DATA	firehose/sahara_protocol.h	/^    SAHARA_EXEC_CMD_READ_DEBUG_DATA  = 0x06,$/;"	e	enum:__anon13
SAHARA_EXEC_CMD_SERIAL_NUM_READ	firehose/sahara_protocol.h	/^    SAHARA_EXEC_CMD_SERIAL_NUM_READ  = 0x01,$/;"	e	enum:__anon13
SAHARA_EXEC_CMD_SWITCH_DMSS	firehose/sahara_protocol.h	/^    SAHARA_EXEC_CMD_SWITCH_DMSS      = 0x04,$/;"	e	enum:__anon13
SAHARA_EXEC_CMD_SWITCH_STREAMING	firehose/sahara_protocol.h	/^    SAHARA_EXEC_CMD_SWITCH_STREAMING = 0x05,$/;"	e	enum:__anon13
SAHARA_HELLO_ID	firehose/sahara_protocol.h	/^    SAHARA_HELLO_ID           = 0x01, \/\/ sent from target to host$/;"	e	enum:__anon9
SAHARA_HELLO_ID	serialif.h	/^    SAHARA_HELLO_ID           = 0x01, \/\/ sent from target to host$/;"	e	enum:__anon30
SAHARA_HELLO_RESP_ID	firehose/sahara_protocol.h	/^    SAHARA_HELLO_RESP_ID      = 0x02, \/\/ sent from host to target$/;"	e	enum:__anon9
SAHARA_HELLO_RESP_ID	serialif.h	/^    SAHARA_HELLO_RESP_ID      = 0x02, \/\/ sent from host to target$/;"	e	enum:__anon30
SAHARA_IMAGE_TYPE_BINARY	firehose/sahara_protocol.h	/^    SAHARA_IMAGE_TYPE_BINARY = 0,               \/* Binary format *\/$/;"	e	enum:__anon10
SAHARA_IMAGE_TYPE_ELF	firehose/sahara_protocol.h	/^    SAHARA_IMAGE_TYPE_ELF,                      \/* ELF format *\/$/;"	e	enum:__anon10
SAHARA_IMAGE_UNKNOWN	firehose/sahara_protocol.h	/^    SAHARA_IMAGE_UNKNOWN = 0x7FFFFFFF           \/* To ensure 32-bits wide *\/$/;"	e	enum:__anon10
SAHARA_LAST_CMD_ID	firehose/sahara_protocol.h	/^    SAHARA_LAST_CMD_ID,$/;"	e	enum:__anon9
SAHARA_LAST_CMD_ID	serialif.h	/^    SAHARA_LAST_CMD_ID,$/;"	e	enum:__anon30
SAHARA_MAX_CMD_ID	firehose/sahara_protocol.h	/^    SAHARA_MAX_CMD_ID             = 0x7FFFFFFF \/\/ To ensure 32-bits wide$/;"	e	enum:__anon9
SAHARA_MAX_CMD_ID	serialif.h	/^    SAHARA_MAX_CMD_ID             = 0x7FFFFFFF \/\/ To ensure 32-bits wide$/;"	e	enum:__anon30
SAHARA_MEMORY_DEBUG_ID	firehose/sahara_protocol.h	/^    SAHARA_MEMORY_DEBUG_ID    = 0x09, \/\/ sent from target to host$/;"	e	enum:__anon9
SAHARA_MEMORY_DEBUG_ID	serialif.h	/^    SAHARA_MEMORY_DEBUG_ID    = 0x09, \/\/ sent from target to host$/;"	e	enum:__anon30
SAHARA_MEMORY_READ_ID	firehose/sahara_protocol.h	/^    SAHARA_MEMORY_READ_ID     = 0x0A, \/\/ sent from host to target$/;"	e	enum:__anon9
SAHARA_MEMORY_READ_ID	serialif.h	/^    SAHARA_MEMORY_READ_ID     = 0x0A, \/\/ sent from host to target$/;"	e	enum:__anon30
SAHARA_MODE_COMMAND	firehose/sahara_protocol.h	/^    SAHARA_MODE_COMMAND           = 0x3,$/;"	e	enum:__anon12
SAHARA_MODE_COMMAND	serialif.h	/^    SAHARA_MODE_COMMAND           = 0x3,  \/\/ place all new commands above this$/;"	e	enum:__anon31
SAHARA_MODE_IMAGE_TX_COMPLETE	firehose/sahara_protocol.h	/^    SAHARA_MODE_IMAGE_TX_COMPLETE = 0x1,$/;"	e	enum:__anon12
SAHARA_MODE_IMAGE_TX_COMPLETE	serialif.h	/^    SAHARA_MODE_IMAGE_TX_COMPLETE = 0x1,$/;"	e	enum:__anon31
SAHARA_MODE_IMAGE_TX_PENDING	firehose/sahara_protocol.h	/^    SAHARA_MODE_IMAGE_TX_PENDING  = 0x0,$/;"	e	enum:__anon12
SAHARA_MODE_IMAGE_TX_PENDING	serialif.h	/^    SAHARA_MODE_IMAGE_TX_PENDING  = 0x0,$/;"	e	enum:__anon31
SAHARA_MODE_LAST	firehose/sahara_protocol.h	/^    SAHARA_MODE_LAST,$/;"	e	enum:__anon12
SAHARA_MODE_LAST	serialif.h	/^    SAHARA_MODE_LAST,$/;"	e	enum:__anon31
SAHARA_MODE_MAX	firehose/sahara_protocol.h	/^    SAHARA_MODE_MAX = 0x7FFFFFFF$/;"	e	enum:__anon12
SAHARA_MODE_MAX	serialif.h	/^    SAHARA_MODE_MAX = 0x7FFFFFFF$/;"	e	enum:__anon31
SAHARA_MODE_MEMORY_DEBUG	firehose/sahara_protocol.h	/^    SAHARA_MODE_MEMORY_DEBUG      = 0x2,$/;"	e	enum:__anon12
SAHARA_MODE_MEMORY_DEBUG	serialif.h	/^    SAHARA_MODE_MEMORY_DEBUG      = 0x2,$/;"	e	enum:__anon31
SAHARA_NAK_CMD_EXEC_FAILURE	firehose/sahara_protocol.h	/^    SAHARA_NAK_CMD_EXEC_FAILURE =               0x1D,$/;"	e	enum:__anon11
SAHARA_NAK_EXEC_CMD_INVALID_PARAM	firehose/sahara_protocol.h	/^    SAHARA_NAK_EXEC_CMD_INVALID_PARAM =         0x1E,$/;"	e	enum:__anon11
SAHARA_NAK_EXEC_CMD_UNSUPPORTED	firehose/sahara_protocol.h	/^    SAHARA_NAK_EXEC_CMD_UNSUPPORTED =           0x1F,$/;"	e	enum:__anon11
SAHARA_NAK_EXEC_DATA_INVALID_CLIENT_CMD	firehose/sahara_protocol.h	/^    SAHARA_NAK_EXEC_DATA_INVALID_CLIENT_CMD =   0x20,$/;"	e	enum:__anon11
SAHARA_NAK_GENERAL_TX_RX_ERROR	firehose/sahara_protocol.h	/^    SAHARA_NAK_GENERAL_TX_RX_ERROR =            0x0C,$/;"	e	enum:__anon11
SAHARA_NAK_HASH_TABLE_AUTH_FAILURE	firehose/sahara_protocol.h	/^    SAHARA_NAK_HASH_TABLE_AUTH_FAILURE =        0x21,$/;"	e	enum:__anon11
SAHARA_NAK_HASH_TABLE_NOT_FOUND	firehose/sahara_protocol.h	/^    SAHARA_NAK_HASH_TABLE_NOT_FOUND =           0x23,$/;"	e	enum:__anon11
SAHARA_NAK_HASH_VERIFICATION_FAILURE	firehose/sahara_protocol.h	/^    SAHARA_NAK_HASH_VERIFICATION_FAILURE =      0x22,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_CMD	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_CMD =                    0x01,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_DATA_SIZE	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_DATA_SIZE =              0x08,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_DATA_SIZE_REQUEST	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_DATA_SIZE_REQUEST =      0x1A,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_DEST_ADDR	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_DEST_ADDR =              0x12,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_ELF_HDR	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_ELF_HDR =                0x14,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_HEADER_SIZE	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_HEADER_SIZE =            0x07,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_HOST_MODE	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_HOST_MODE =              0x18,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_HOST_PROTOCOL	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_HOST_PROTOCOL =          0x04,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_IMAGE_TYPE	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_IMAGE_TYPE =             0x09,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_IMG_HDR_DATA_SIZE	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_IMG_HDR_DATA_SIZE =      0x13,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_MEMORY_READ	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_MEMORY_READ =            0x19,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_MODE_SWITCH	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_MODE_SWITCH =            0x1C,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_PACKET_SIZE	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_PACKET_SIZE =            0x05,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_PDHR_SIZE	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_PDHR_SIZE =              0x0F,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_RX_LENGTH	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_RX_LENGTH =              0x0B,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_TARGET_PROTOCOL	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_TARGET_PROTOCOL =        0x03,$/;"	e	enum:__anon11
SAHARA_NAK_INVALID_TX_LENGTH	firehose/sahara_protocol.h	/^    SAHARA_NAK_INVALID_TX_LENGTH =              0x0A,$/;"	e	enum:__anon11
SAHARA_NAK_LAST_CODE	firehose/sahara_protocol.h	/^    SAHARA_NAK_LAST_CODE,$/;"	e	enum:__anon11
SAHARA_NAK_MAX_CODE	firehose/sahara_protocol.h	/^    SAHARA_NAK_MAX_CODE = 0x7FFFFFFF \/\/ To ensure 32-bits wide$/;"	e	enum:__anon11
SAHARA_NAK_MEMORY_DEBUG_NOT_SUPPORTED	firehose/sahara_protocol.h	/^    SAHARA_NAK_MEMORY_DEBUG_NOT_SUPPORTED =     0x1B,$/;"	e	enum:__anon11
SAHARA_NAK_MULTIPLE_SHARED_SEG	firehose/sahara_protocol.h	/^    SAHARA_NAK_MULTIPLE_SHARED_SEG =            0x10,$/;"	e	enum:__anon11
SAHARA_NAK_PROTOCOL_MISMATCH	firehose/sahara_protocol.h	/^    SAHARA_NAK_PROTOCOL_MISMATCH =              0x02,$/;"	e	enum:__anon11
SAHARA_NAK_READ_DATA_ERROR	firehose/sahara_protocol.h	/^    SAHARA_NAK_READ_DATA_ERROR =                0x0D,$/;"	e	enum:__anon11
SAHARA_NAK_TIMEOUT_RX	firehose/sahara_protocol.h	/^    SAHARA_NAK_TIMEOUT_RX =                     0x16,$/;"	e	enum:__anon11
SAHARA_NAK_TIMEOUT_TX	firehose/sahara_protocol.h	/^    SAHARA_NAK_TIMEOUT_TX =                     0x17,$/;"	e	enum:__anon11
SAHARA_NAK_UNEXPECTED_IMAGE_ID	firehose/sahara_protocol.h	/^    SAHARA_NAK_UNEXPECTED_IMAGE_ID =            0x06,$/;"	e	enum:__anon11
SAHARA_NAK_UNINIT_PHDR_LOC	firehose/sahara_protocol.h	/^    SAHARA_NAK_UNINIT_PHDR_LOC =                0x11,$/;"	e	enum:__anon11
SAHARA_NAK_UNKNOWN_HOST_ERROR	firehose/sahara_protocol.h	/^    SAHARA_NAK_UNKNOWN_HOST_ERROR =             0x15,$/;"	e	enum:__anon11
SAHARA_NAK_UNSUPPORTED_NUM_PHDRS	firehose/sahara_protocol.h	/^    SAHARA_NAK_UNSUPPORTED_NUM_PHDRS =          0x0E,$/;"	e	enum:__anon11
SAHARA_NO_CMD_ID	firehose/sahara_protocol.h	/^    SAHARA_NO_CMD_ID          = 0x00,$/;"	e	enum:__anon9
SAHARA_NO_CMD_ID	serialif.h	/^    SAHARA_NO_CMD_ID          = 0x00,$/;"	e	enum:__anon30
SAHARA_PROTOCOL_H	firehose/sahara_protocol.h	38;"	d
SAHARA_RAW_BUFFER_SIZE	firehose/sahara_protocol.h	57;"	d
SAHARA_READ_DATA_ID	firehose/sahara_protocol.h	/^    SAHARA_READ_DATA_ID       = 0x03, \/\/ sent from target to host$/;"	e	enum:__anon9
SAHARA_READ_DATA_ID	serialif.h	/^    SAHARA_READ_DATA_ID       = 0x03, \/\/ sent from target to host$/;"	e	enum:__anon30
SAHARA_RESET_ID	firehose/sahara_protocol.h	/^    SAHARA_RESET_ID           = 0x07, \/\/ sent from host to target$/;"	e	enum:__anon9
SAHARA_RESET_ID	serialif.h	/^    SAHARA_RESET_ID           = 0x07, \/\/ sent from host to target$/;"	e	enum:__anon30
SAHARA_RESET_RESP_ID	firehose/sahara_protocol.h	/^    SAHARA_RESET_RESP_ID      = 0x08, \/\/ sent from target to host$/;"	e	enum:__anon9
SAHARA_RESET_RESP_ID	serialif.h	/^    SAHARA_RESET_RESP_ID      = 0x08, \/\/ sent from target to host$/;"	e	enum:__anon30
SAHARA_STATUS_SUCCESS	firehose/sahara_protocol.h	/^    SAHARA_STATUS_SUCCESS =                     0x00,$/;"	e	enum:__anon11
SAHARA_VERSION	firehose/sahara_protocol.h	52;"	d
SAHARA_VERSION_SUPPORTED	firehose/sahara_protocol.h	53;"	d
SAHARA_WAIT_CMD_EXEC_RESP	firehose/sahara_protocol.h	/^    SAHARA_WAIT_CMD_EXEC_RESP,$/;"	e	enum:__anon14
SAHARA_WAIT_COMMAND	firehose/sahara_protocol.h	/^    SAHARA_WAIT_COMMAND,$/;"	e	enum:__anon14
SAHARA_WAIT_DONE_RESP	firehose/sahara_protocol.h	/^    SAHARA_WAIT_DONE_RESP,$/;"	e	enum:__anon14
SAHARA_WAIT_HELLO	firehose/sahara_protocol.h	/^    SAHARA_WAIT_HELLO,$/;"	e	enum:__anon14
SAHARA_WAIT_MEMORY_READ	firehose/sahara_protocol.h	/^    SAHARA_WAIT_MEMORY_READ,$/;"	e	enum:__anon14
SAHARA_WAIT_MEMORY_REGION	firehose/sahara_protocol.h	/^    SAHARA_WAIT_MEMORY_REGION,$/;"	e	enum:__anon14
SAHARA_WAIT_MEMORY_TABLE	firehose/sahara_protocol.h	/^    SAHARA_WAIT_MEMORY_TABLE,$/;"	e	enum:__anon14
SAHARA_WAIT_RESET_RESP	firehose/sahara_protocol.h	/^    SAHARA_WAIT_RESET_RESP,$/;"	e	enum:__anon14
SECTOR_SIZE_IN_BYTES	firehose/firehose_protocol.c	/^    uint32_t SECTOR_SIZE_IN_BYTES;$/;"	m	struct:fh_erase_cmd	file:	access:public
SECTOR_SIZE_IN_BYTES	firehose/firehose_protocol.c	/^    uint32_t SECTOR_SIZE_IN_BYTES;$/;"	m	struct:fh_program_cmd	file:	access:public
SET	md5.cpp	20;"	d	file:
SET	md5.cpp	25;"	d	file:
SHARA_PROCTOL_VERSON_NUM	serialif.h	79;"	d
SINGLELINE	atchannel.h	/^    SINGLELINE,  \/* a single intermediate response starting with a prefix *\/$/;"	e	enum:__anon1
STATE_DLOAD_MODE	download.h	/^    STATE_DLOAD_MODE ,$/;"	e	enum:__anon5
STATE_GOING_MODE	download.h	/^    STATE_GOING_MODE ,$/;"	e	enum:__anon5
STATE_NORMAL_MODE	download.h	/^    STATE_NORMAL_MODE ,$/;"	e	enum:__anon5
STATE_SAHARA_MODE	download.h	/^    STATE_SAHARA_MODE,$/;"	e	enum:__anon5
STATE_UNSPECIFIED	download.h	/^    STATE_UNSPECIFIED,$/;"	e	enum:__anon5
STEP	md5.cpp	14;"	d	file:
STREAMING	quectel_common.h	8;"	d
STRINGIFY	os_linux.cpp	15;"	d	file:
SUCESS_OR_ERROR_STATE	serialif.h	75;"	d
SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const {$/;"	f	class:TiXmlDocument	signature:( FILE* fp ) const
SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const {$/;"	f	class:TiXmlDocument	signature:( const char * filename ) const
SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const {$/;"	f	class:TiXmlDocument	signature:() const
SendDoPacket	serialif.cpp	/^int SendDoPacket() {$/;"	f	signature:()
SendDoPacket	serialif.h	/^int SendDoPacket();$/;"	p
SendHelloPacket	serialif.cpp	/^int SendHelloPacket() {$/;"	f	signature:()
SendHelloPacket	serialif.h	/^int SendHelloPacket();$/;"	p
SendHelloPacketTest	serialif.cpp	/^int SendHelloPacketTest(int emergency_mode) {$/;"	f	signature:(int emergency_mode)
SendHelloPacketTest	serialif.h	/^int SendHelloPacketTest(int emergency_mode);$/;"	p	signature:(int emergency_mode)
SendResetPacket	serialif.cpp	/^int SendResetPacket() {$/;"	f	signature:()
SendResetPacket	serialif.h	/^int SendResetPacket();$/;"	p
SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue ) {$/;"	f	class:TiXmlElement	signature:( const char * cname, const char * cvalue )
SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val ) {$/;"	f	class:TiXmlElement	signature:( const char * name, int val )
SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& _name, const std::string& _value ) {$/;"	f	class:TiXmlElement	signature:( const std::string& _name, const std::string& _value )
SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val ) {$/;"	f	class:TiXmlElement	signature:( const std::string& name, int val )
SetDoubleAttribute	tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val ) {$/;"	f	class:TiXmlElement	signature:( const char * name, double val )
SetDoubleAttribute	tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const std::string& name, double val ) {$/;"	f	class:TiXmlElement	signature:( const std::string& name, double val )
SetDoubleValue	tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value ) {$/;"	f	class:TiXmlAttribute	signature:( double _value )
SetError	tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlDocument	signature:( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )
SetIntValue	tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value ) {$/;"	f	class:TiXmlAttribute	signature:( int _value )
SkipStorageInit	firehose/firehose_protocol.c	/^    uint32_t SkipStorageInit;$/;"	m	struct:fh_configure_cmd	file:	access:public
SkipWhiteSpace	tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlBase	signature:( const char* p, TiXmlEncoding encoding )
Stamp	tinyxmlparser.cpp	/^    void Stamp( const char* now, TiXmlEncoding encoding );$/;"	p	class:TiXmlParsingData	file:	access:public	signature:( const char* now, TiXmlEncoding encoding )
Stamp	tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlParsingData	signature:( const char* now, TiXmlEncoding encoding )
Status	serialif.h	/^    uint32 Status;$/;"	m	struct:__anon26	access:public
StreamIn	tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlComment	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlDeclaration	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlDocument	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag) {$/;"	f	class:TiXmlElement	signature:(std::istream * in, TIXML_STRING * tag)
StreamIn	tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlText	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlUnknown	signature:( std::istream * in, TIXML_STRING * tag )
StreamTo	tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag ) {$/;"	f	class:TiXmlBase	signature:( std::istream * in, int character, TIXML_STRING * tag )
StreamWhiteSpace	tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlBase	signature:( std::istream * in, TIXML_STRING * tag )
StringEqual	tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase	signature:( const char* p, const char* tag, bool ignoreCase, TiXmlEncoding encoding )
TARGET_PLATFORM_6085	download.h	/^    TARGET_PLATFORM_6085 ,$/;"	e	enum:__anon6
TARGET_PLATFORM_6270	download.h	/^    TARGET_PLATFORM_6270 ,$/;"	e	enum:__anon6
TARGET_PLATFORM_6290	download.h	/^    TARGET_PLATFORM_6290 ,$/;"	e	enum:__anon6
TARGET_PLATFORM_9615	download.h	/^    TARGET_PLATFORM_9615 ,$/;"	e	enum:__anon6
TINYXML_INCLUDED	tinyxml.h	27;"	d
TIXML_DEFAULT_ENCODING	tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	v
TIXML_ENCODING_LEGACY	tinyxml.h	/^    TIXML_ENCODING_LEGACY$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UNKNOWN	tinyxml.h	/^    TIXML_ENCODING_UNKNOWN,$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UTF8	tinyxml.h	/^    TIXML_ENCODING_UTF8,$/;"	e	enum:TiXmlEncoding
TIXML_EXPLICIT	tinystr.h	39;"	d
TIXML_EXPLICIT	tinystr.h	42;"	d
TIXML_EXPLICIT	tinystr.h	44;"	d
TIXML_LOG	tinyxmlparser.cpp	34;"	d	file:
TIXML_LOG	tinyxmlparser.cpp	36;"	d	file:
TIXML_MAJOR_VERSION	tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	v
TIXML_MINOR_VERSION	tinyxml.h	/^const int TIXML_MINOR_VERSION = 6;$/;"	v
TIXML_NO_ATTRIBUTE	tinyxml.h	/^    TIXML_NO_ATTRIBUTE,$/;"	e	enum:__anon32
TIXML_PATCH_VERSION	tinyxml.h	/^const int TIXML_PATCH_VERSION = 2;$/;"	v
TIXML_SAFE	tinyxml.h	59;"	d
TIXML_SNPRINTF	tinyxml.h	64;"	d
TIXML_SNPRINTF	tinyxml.h	69;"	d
TIXML_SNPRINTF	tinyxml.h	74;"	d
TIXML_SNPRINTF	tinyxml.h	77;"	d
TIXML_SSCANF	tinyxml.h	65;"	d
TIXML_SSCANF	tinyxml.h	70;"	d
TIXML_SSCANF	tinyxml.h	75;"	d
TIXML_SSCANF	tinyxml.h	78;"	d
TIXML_STRING	tinyxml.h	49;"	d
TIXML_STRING	tinyxml.h	52;"	d
TIXML_STRING_INCLUDED	tinystr.h	28;"	d
TIXML_SUCCESS	tinyxml.h	/^    TIXML_SUCCESS,$/;"	e	enum:__anon32
TIXML_UTF_LEAD_0	tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v
TIXML_UTF_LEAD_1	tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v
TIXML_UTF_LEAD_2	tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v
TIXML_WRONG_TYPE	tinyxml.h	/^    TIXML_WRONG_TYPE$/;"	e	enum:__anon32
TargetPlatform	download.h	/^    target_platform       TargetPlatform;$/;"	m	struct:__anon7	access:public
TargetState	download.h	/^    target_current_state  TargetState;$/;"	m	struct:__anon7	access:public
TiXmlAttribute	tinyxml.h	/^class TiXmlAttribute;$/;"	v
TiXmlAttribute::DoubleValue	tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const {$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::IntValue	tinyxml.cpp	/^int TiXmlAttribute::IntValue() const {$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::Next	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const {$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::Parse	tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlAttribute	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlAttribute::Previous	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const {$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::Print	tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const {$/;"	f	class:TiXmlAttribute	signature:( FILE* cfile, int , TIXML_STRING* str ) const
TiXmlAttribute::QueryDoubleValue	tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const {$/;"	f	class:TiXmlAttribute	signature:( double* dval ) const
TiXmlAttribute::QueryIntValue	tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const {$/;"	f	class:TiXmlAttribute	signature:( int* ival ) const
TiXmlAttribute::SetDoubleValue	tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value ) {$/;"	f	class:TiXmlAttribute	signature:( double _value )
TiXmlAttribute::SetIntValue	tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value ) {$/;"	f	class:TiXmlAttribute	signature:( int _value )
TiXmlAttributeSet	tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet() {$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlAttributeSet::Add	tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe ) {$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* addMe )
TiXmlAttributeSet::Find	tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const {$/;"	f	class:TiXmlAttributeSet	signature:( const char* name ) const
TiXmlAttributeSet::Find	tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const {$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& name ) const
TiXmlAttributeSet::FindOrCreate	tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const char* _name ) {$/;"	f	class:TiXmlAttributeSet	signature:( const char* _name )
TiXmlAttributeSet::FindOrCreate	tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const std::string& _name ) {$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& _name )
TiXmlAttributeSet::Remove	tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe ) {$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* removeMe )
TiXmlAttributeSet::TiXmlAttributeSet	tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet() {$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlAttributeSet::~TiXmlAttributeSet	tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet() {$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlBase::ConvertUTF32ToUTF8	tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length ) {$/;"	f	class:TiXmlBase	signature:( unsigned long input, char* output, int* length )
TiXmlBase::EncodeString	tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString ) {$/;"	f	class:TiXmlBase	signature:( const TIXML_STRING& str, TIXML_STRING* outString )
TiXmlBase::GetEntity	tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlBase	signature:( const char* p, char* value, int* length, TiXmlEncoding encoding )
TiXmlBase::IsAlpha	tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ ) {$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
TiXmlBase::IsAlphaNum	tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ ) {$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
TiXmlBase::ReadName	tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )
TiXmlBase::ReadText	tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(	const char* p,$/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * text, bool trimWhiteSpace, const char* endTag, bool caseInsensitive, TiXmlEncoding encoding )
TiXmlBase::SkipWhiteSpace	tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlBase	signature:( const char* p, TiXmlEncoding encoding )
TiXmlBase::StreamTo	tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag ) {$/;"	f	class:TiXmlBase	signature:( std::istream * in, int character, TIXML_STRING * tag )
TiXmlBase::StreamWhiteSpace	tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlBase	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlBase::StringEqual	tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase	signature:( const char* p, const char* tag, bool ignoreCase, TiXmlEncoding encoding )
TiXmlBase::condenseWhiteSpace	tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
TiXmlBase::entity	tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ TiXmlBase::NUM_ENTITY ] = {$/;"	m	class:TiXmlBase	file:
TiXmlBase::errorString	tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TiXmlBase::TIXML_ERROR_STRING_COUNT ] = {$/;"	m	class:TiXmlBase	file:
TiXmlBase::utf8ByteTable	tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = {$/;"	m	class:TiXmlBase	file:
TiXmlComment	tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& copy )
TiXmlComment	tinyxml.h	/^class TiXmlComment;$/;"	v
TiXmlComment::Accept	tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlComment	signature:( TiXmlVisitor* visitor ) const
TiXmlComment::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const {$/;"	f	class:TiXmlComment	signature:() const
TiXmlComment::CopyTo	tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const {$/;"	f	class:TiXmlComment	signature:( TiXmlComment* target ) const
TiXmlComment::Parse	tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlComment	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlComment::Print	tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlComment	signature:( FILE* cfile, int depth ) const
TiXmlComment::StreamIn	tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlComment	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlComment::TiXmlComment	tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& copy )
TiXmlComment::operator =	tinyxml.cpp	/^TiXmlComment& TiXmlComment::operator=( const TiXmlComment& base ) {$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& base )
TiXmlCursor	tinyxml.h	/^    TiXmlCursor()		{$/;"	f	struct:TiXmlCursor	access:public
TiXmlCursor	tinyxml.h	/^struct TiXmlCursor {$/;"	s
TiXmlCursor::Clear	tinyxml.h	/^    void Clear()		{$/;"	f	struct:TiXmlCursor	access:public
TiXmlCursor::TiXmlCursor	tinyxml.h	/^    TiXmlCursor()		{$/;"	f	struct:TiXmlCursor	access:public
TiXmlCursor::col	tinyxml.h	/^    int col;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
TiXmlCursor::row	tinyxml.h	/^    int row;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:TiXmlDeclaration	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration	signature:( const char * _version, const char * _encoding, const char * _standalone )
TiXmlDeclaration	tinyxml.h	/^class TiXmlDeclaration;$/;"	v
TiXmlDeclaration::Accept	tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlDeclaration	signature:( TiXmlVisitor* visitor ) const
TiXmlDeclaration::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const {$/;"	f	class:TiXmlDeclaration	signature:() const
TiXmlDeclaration::CopyTo	tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const {$/;"	f	class:TiXmlDeclaration	signature:( TiXmlDeclaration* target ) const
TiXmlDeclaration::Parse	tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding ) {$/;"	f	class:TiXmlDeclaration	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )
TiXmlDeclaration::Print	tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const {$/;"	f	class:TiXmlDeclaration	signature:( FILE* cfile, int , TIXML_STRING* str ) const
TiXmlDeclaration::StreamIn	tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlDeclaration	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDeclaration::TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:TiXmlDeclaration	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration::TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration	signature:( const char * _version, const char * _encoding, const char * _standalone )
TiXmlDeclaration::operator =	tinyxml.cpp	/^TiXmlDeclaration& TiXmlDeclaration::operator=( const TiXmlDeclaration& copy ) {$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT ) {$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT ) {$/;"	f	class:TiXmlDocument	signature:( const char * documentName )
TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT ) {$/;"	f	class:TiXmlDocument	signature:( const std::string& documentName )
TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT ) {$/;"	f	class:TiXmlDocument	signature:()
TiXmlDocument	tinyxml.h	/^class TiXmlDocument;$/;"	v
TiXmlDocument::Accept	tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlDocument	signature:( TiXmlVisitor* visitor ) const
TiXmlDocument::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const {$/;"	f	class:TiXmlDocument	signature:() const
TiXmlDocument::CopyTo	tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const {$/;"	f	class:TiXmlDocument	signature:( TiXmlDocument* target ) const
TiXmlDocument::LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlDocument	signature:( FILE* file, TiXmlEncoding encoding )
TiXmlDocument::LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding ) {$/;"	f	class:TiXmlDocument	signature:( TiXmlEncoding encoding )
TiXmlDocument::LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlDocument	signature:( const char* _filename, TiXmlEncoding encoding )
TiXmlDocument::Parse	tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlDocument	signature:( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )
TiXmlDocument::Print	tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDocument	signature:( FILE* cfile, int depth ) const
TiXmlDocument::SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const {$/;"	f	class:TiXmlDocument	signature:( FILE* fp ) const
TiXmlDocument::SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const {$/;"	f	class:TiXmlDocument	signature:( const char * filename ) const
TiXmlDocument::SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const {$/;"	f	class:TiXmlDocument	signature:() const
TiXmlDocument::SetError	tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlDocument	signature:( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlDocument::StreamIn	tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlDocument	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDocument::TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT ) {$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument::TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT ) {$/;"	f	class:TiXmlDocument	signature:( const char * documentName )
TiXmlDocument::TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT ) {$/;"	f	class:TiXmlDocument	signature:( const std::string& documentName )
TiXmlDocument::TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT ) {$/;"	f	class:TiXmlDocument	signature:()
TiXmlDocument::operator =	tinyxml.cpp	/^TiXmlDocument& TiXmlDocument::operator=( const TiXmlDocument& copy ) {$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement	signature:(const char * _value)
TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& copy)
TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value )$/;"	f	class:TiXmlElement	signature:( const std::string& _value )
TiXmlElement	tinyxml.h	/^class TiXmlElement;$/;"	v
TiXmlElement::Accept	tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlElement	signature:( TiXmlVisitor* visitor ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const {$/;"	f	class:TiXmlElement	signature:( const char* name ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, double* d ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, int* i ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const {$/;"	f	class:TiXmlElement	signature:( const std::string& name ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const {$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* d ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const {$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* i ) const
TiXmlElement::ClearThis	tinyxml.cpp	/^void TiXmlElement::ClearThis() {$/;"	f	class:TiXmlElement	signature:()
TiXmlElement::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const {$/;"	f	class:TiXmlElement	signature:() const
TiXmlElement::CopyTo	tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const {$/;"	f	class:TiXmlElement	signature:( TiXmlElement* target ) const
TiXmlElement::GetText	tinyxml.cpp	/^const char* TiXmlElement::GetText() const {$/;"	f	class:TiXmlElement	signature:() const
TiXmlElement::Parse	tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlElement::Print	tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlElement	signature:( FILE* cfile, int depth ) const
TiXmlElement::QueryBoolAttribute	tinyxml.cpp	/^int TiXmlElement::QueryBoolAttribute( const char* name, bool* bval ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, bool* bval ) const
TiXmlElement::QueryDoubleAttribute	tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, double* dval ) const
TiXmlElement::QueryDoubleAttribute	tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const {$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* dval ) const
TiXmlElement::QueryIntAttribute	tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, int* ival ) const
TiXmlElement::QueryIntAttribute	tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const {$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* ival ) const
TiXmlElement::QueryUnsignedAttribute	tinyxml.cpp	/^int TiXmlElement::QueryUnsignedAttribute( const char* name, unsigned* value ) const {$/;"	f	class:TiXmlElement	signature:( const char* name, unsigned* value ) const
TiXmlElement::ReadValue	tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlElement::RemoveAttribute	tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name ) {$/;"	f	class:TiXmlElement	signature:( const char * name )
TiXmlElement::SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue ) {$/;"	f	class:TiXmlElement	signature:( const char * cname, const char * cvalue )
TiXmlElement::SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val ) {$/;"	f	class:TiXmlElement	signature:( const char * name, int val )
TiXmlElement::SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& _name, const std::string& _value ) {$/;"	f	class:TiXmlElement	signature:( const std::string& _name, const std::string& _value )
TiXmlElement::SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val ) {$/;"	f	class:TiXmlElement	signature:( const std::string& name, int val )
TiXmlElement::SetDoubleAttribute	tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val ) {$/;"	f	class:TiXmlElement	signature:( const char * name, double val )
TiXmlElement::SetDoubleAttribute	tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const std::string& name, double val ) {$/;"	f	class:TiXmlElement	signature:( const std::string& name, double val )
TiXmlElement::StreamIn	tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag) {$/;"	f	class:TiXmlElement	signature:(std::istream * in, TIXML_STRING * tag)
TiXmlElement::TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement	signature:(const char * _value)
TiXmlElement::TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& copy)
TiXmlElement::TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value )$/;"	f	class:TiXmlElement	signature:( const std::string& _value )
TiXmlElement::operator =	tinyxml.cpp	/^TiXmlElement& TiXmlElement::operator=( const TiXmlElement& base ) {$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& base )
TiXmlElement::~TiXmlElement	tinyxml.cpp	/^TiXmlElement::~TiXmlElement() {$/;"	f	class:TiXmlElement	signature:()
TiXmlEncoding	tinyxml.h	/^enum TiXmlEncoding {$/;"	g
TiXmlFOpen	tinyxml.cpp	/^FILE* TiXmlFOpen( const char* filename, const char* mode ) {$/;"	f	signature:( const char* filename, const char* mode )
TiXmlFOpen	tinyxml.cpp	/^FILE* TiXmlFOpen( const char* filename, const char* mode );$/;"	p	file:	signature:( const char* filename, const char* mode )
TiXmlHandle::Child	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const {$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
TiXmlHandle::Child	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const {$/;"	f	class:TiXmlHandle	signature:( int count ) const
TiXmlHandle::ChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const {$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
TiXmlHandle::ChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const {$/;"	f	class:TiXmlHandle	signature:( int count ) const
TiXmlHandle::FirstChild	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const {$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
TiXmlHandle::FirstChild	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const {$/;"	f	class:TiXmlHandle	signature:() const
TiXmlHandle::FirstChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const {$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
TiXmlHandle::FirstChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const {$/;"	f	class:TiXmlHandle	signature:() const
TiXmlNode	tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase() {$/;"	f	class:TiXmlNode	signature:( NodeType _type )
TiXmlNode::Clear	tinyxml.cpp	/^void TiXmlNode::Clear() {$/;"	f	class:TiXmlNode	signature:()
TiXmlNode::CopyTo	tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* target ) const
TiXmlNode::FirstChild	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::FirstChildElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::FirstChildElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const {$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::GetDocument	tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const {$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::Identify	tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlNode	signature:( const char* p, TiXmlEncoding encoding )
TiXmlNode::InsertAfterChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis ) {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
TiXmlNode::InsertBeforeChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis ) {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
TiXmlNode::InsertEndChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis ) {$/;"	f	class:TiXmlNode	signature:( const TiXmlNode& addThis )
TiXmlNode::IterateChildren	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const {$/;"	f	class:TiXmlNode	signature:( const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const {$/;"	f	class:TiXmlNode	signature:( const char * val, const TiXmlNode* previous ) const
TiXmlNode::LastChild	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::LinkEndChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node ) {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* node )
TiXmlNode::NextSibling	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::NextSiblingElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::NextSiblingElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const {$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::PreviousSibling	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const {$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::RemoveChild	tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis ) {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* removeThis )
TiXmlNode::ReplaceChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis ) {$/;"	f	class:TiXmlNode	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
TiXmlNode::TiXmlNode	tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase() {$/;"	f	class:TiXmlNode	signature:( NodeType _type )
TiXmlNode::~TiXmlNode	tinyxml.cpp	/^TiXmlNode::~TiXmlNode() {$/;"	f	class:TiXmlNode	signature:()
TiXmlParsingData	tinyxml.h	/^class TiXmlParsingData;$/;"	v
TiXmlParsingData	tinyxmlparser.cpp	/^    TiXmlParsingData( const char* start, int _tabsize, int row, int col ) {$/;"	f	class:TiXmlParsingData	file:	access:private	signature:( const char* start, int _tabsize, int row, int col )
TiXmlParsingData	tinyxmlparser.cpp	/^class TiXmlParsingData {$/;"	c	file:
TiXmlParsingData::Cursor	tinyxmlparser.cpp	/^    const TiXmlCursor& Cursor() const	{$/;"	f	class:TiXmlParsingData	access:public	signature:() const
TiXmlParsingData::Stamp	tinyxmlparser.cpp	/^    void Stamp( const char* now, TiXmlEncoding encoding );$/;"	p	class:TiXmlParsingData	file:	access:public	signature:( const char* now, TiXmlEncoding encoding )
TiXmlParsingData::Stamp	tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlParsingData	signature:( const char* now, TiXmlEncoding encoding )
TiXmlParsingData::TiXmlParsingData	tinyxmlparser.cpp	/^    TiXmlParsingData( const char* start, int _tabsize, int row, int col ) {$/;"	f	class:TiXmlParsingData	file:	access:private	signature:( const char* start, int _tabsize, int row, int col )
TiXmlParsingData::cursor	tinyxmlparser.cpp	/^    TiXmlCursor		cursor;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlParsingData::stamp	tinyxmlparser.cpp	/^    const char*		stamp;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlParsingData::tabsize	tinyxmlparser.cpp	/^    int				tabsize;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlPrinter::Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlComment& comment )
TiXmlPrinter::Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDeclaration& declaration )
TiXmlPrinter::Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlText& text )
TiXmlPrinter::Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlUnknown& unknown )
TiXmlPrinter::VisitEnter	tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
TiXmlPrinter::VisitEnter	tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
TiXmlPrinter::VisitExit	tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
TiXmlPrinter::VisitExit	tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element )
TiXmlString::append	tinystr.cpp	/^TiXmlString& TiXmlString::append(const char* str, size_type len) {$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
TiXmlString::assign	tinystr.cpp	/^TiXmlString& TiXmlString::assign(const char* str, size_type len) {$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
TiXmlString::npos	tinystr.cpp	/^const TiXmlString::size_type TiXmlString::npos = static_cast< TiXmlString::size_type >(-1);$/;"	m	class:TiXmlString	file:
TiXmlString::nullrep_	tinystr.cpp	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:TiXmlString	file:
TiXmlString::reserve	tinystr.cpp	/^void TiXmlString::reserve (size_type cap) {$/;"	f	class:TiXmlString	signature:(size_type cap)
TiXmlText	tinyxml.h	/^class TiXmlText;$/;"	v
TiXmlText::Accept	tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlText	signature:( TiXmlVisitor* visitor ) const
TiXmlText::Blank	tinyxmlparser.cpp	/^bool TiXmlText::Blank() const {$/;"	f	class:TiXmlText	signature:() const
TiXmlText::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const {$/;"	f	class:TiXmlText	signature:() const
TiXmlText::CopyTo	tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const {$/;"	f	class:TiXmlText	signature:( TiXmlText* target ) const
TiXmlText::Parse	tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlText	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlText::Print	tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlText	signature:( FILE* cfile, int depth ) const
TiXmlText::StreamIn	tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlText	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlUnknown	tinyxml.h	/^class TiXmlUnknown;$/;"	v
TiXmlUnknown::Accept	tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const {$/;"	f	class:TiXmlUnknown	signature:( TiXmlVisitor* visitor ) const
TiXmlUnknown::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const {$/;"	f	class:TiXmlUnknown	signature:() const
TiXmlUnknown::CopyTo	tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const {$/;"	f	class:TiXmlUnknown	signature:( TiXmlUnknown* target ) const
TiXmlUnknown::Parse	tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding ) {$/;"	f	class:TiXmlUnknown	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlUnknown::Print	tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlUnknown	signature:( FILE* cfile, int depth ) const
TiXmlUnknown::StreamIn	tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag ) {$/;"	f	class:TiXmlUnknown	signature:( std::istream * in, TIXML_STRING * tag )
U16	fastboot/usb_linux_fastboot.c	/^typedef  unsigned short    U16;$/;"	t	file:
USBDEVFS_URB_ZERO_PACKET	firehose/usb2tcp.c	236;"	d	file:
USBDEVFS_URB_ZERO_PACKET	firehose/usb_linux.c	316;"	d	file:
USBDEVFS_URB_ZERO_PACKET	firehose/usb_linux_firehose.c	189;"	d	file:
USB_DT_SS_ENDPOINT_COMP	fastboot/usb_linux_fastboot.c	82;"	d	file:
USB_DT_SS_EP_COMP_SIZE	fastboot/usb_linux_fastboot.c	86;"	d	file:
Ufile	download.h	/^} Ufile;$/;"	t	typeref:struct:__anon4
VERSION_CODE	os_linux.cpp	16;"	d	file:
VERSION_STRING	os_linux.cpp	17;"	d	file:
Verbose	firehose/firehose_protocol.c	/^    uint32_t Verbose;$/;"	m	struct:fh_configure_cmd	file:	access:public
VersionCompatible	serialif.h	/^    uint32 VersionCompatible;$/;"	m	struct:__anon27	access:public
VersionNumber	serialif.h	/^    uint32 VersionNumber;$/;"	m	struct:__anon27	access:public
Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlComment& comment )
Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDeclaration& declaration )
Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlText& text )
Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlUnknown& unknown )
VisitEnter	tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
VisitEnter	tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
VisitExit	tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
VisitExit	tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element ) {$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element )
WNOHANG	ril-daemon.c	69;"	d	file:
WNOHANG	ril-daemon.cpp	69;"	d	file:
WRITE_LENGTH	serialif.cpp	1111;"	d	file:
WRITE_PACKET_LENGTH	platform_def.h	40;"	d
WriteABuffer	os_linux.cpp	/^int WriteABuffer(int file, const unsigned char * lpBuf, int dwToWrite) {$/;"	f	signature:(int file, const unsigned char * lpBuf, int dwToWrite)
WriteABuffer	os_linux.h	/^int WriteABuffer(int file, const unsigned char * lpBuf, int dwToWrite);$/;"	p	signature:(int file, const unsigned char * lpBuf, int dwToWrite)
ZlpAwareHost	firehose/firehose_protocol.c	/^    uint32_t ZlpAwareHost;$/;"	m	struct:fh_configure_cmd	file:	access:public
ZlpAwareHost	firehose/firehose_protocol.c	/^    unsigned ZlpAwareHost;$/;"	m	struct:fh_data	file:	access:public
_FASTBOOT_H_	fastboot/fastboot.h	30;"	d
_QUECTEL_MD5_H	md5.h	3;"	d
_USB_H_	fastboot/usb.h	30;"	d
__DOWNLOAD_H__	download.h	3;"	d
__FILE_H__	file.h	2;"	d
__OS_LINUX_CPP_H__	os_linux.cpp	1;"	d	file:
__OS_LINUX_H__	os_linux.h	2;"	d
__PLATFORM_DEF_H__	platform_def.h	3;"	d
__SERIALIF_H__	serialif.h	3;"	d
__STRINGIFY	os_linux.cpp	14;"	d	file:
__anon15::command	firehose/sahara_protocol.h	/^    uint32_t command;                 \/\/ command ID$/;"	m	struct:__anon15	access:public
__anon15::length	firehose/sahara_protocol.h	/^    uint32_t length;                  \/\/ packet length incl command and length$/;"	m	struct:__anon15	access:public
__anon16::cmd_packet_length	firehose/sahara_protocol.h	/^    uint32_t cmd_packet_length;       \/\/ maximum packet size supported for command$/;"	m	struct:__anon16	access:public
__anon16::header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon16	access:public
__anon16::mode	firehose/sahara_protocol.h	/^    uint32_t mode;                    \/\/ expected mode of target operation$/;"	m	struct:__anon16	access:public
__anon16::reserved0	firehose/sahara_protocol.h	/^    uint32_t reserved0;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
__anon16::reserved1	firehose/sahara_protocol.h	/^    uint32_t reserved1;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
__anon16::reserved2	firehose/sahara_protocol.h	/^    uint32_t reserved2;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
__anon16::reserved3	firehose/sahara_protocol.h	/^    uint32_t reserved3;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
__anon16::reserved4	firehose/sahara_protocol.h	/^    uint32_t reserved4;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
__anon16::reserved5	firehose/sahara_protocol.h	/^    uint32_t reserved5;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
__anon16::version	firehose/sahara_protocol.h	/^    uint32_t version;                 \/\/ target protocol version number$/;"	m	struct:__anon16	access:public
__anon16::version_supported	firehose/sahara_protocol.h	/^    uint32_t version_supported;       \/\/ minimum protocol version number supported$/;"	m	struct:__anon16	access:public
__anon17::header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon17	access:public
__anon17::mode	firehose/sahara_protocol.h	/^    uint32_t mode;                    \/\/ mode of operation for target to execute$/;"	m	struct:__anon17	access:public
__anon17::reserved0	firehose/sahara_protocol.h	/^    uint32_t reserved0;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
__anon17::reserved1	firehose/sahara_protocol.h	/^    uint32_t reserved1;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
__anon17::reserved2	firehose/sahara_protocol.h	/^    uint32_t reserved2;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
__anon17::reserved3	firehose/sahara_protocol.h	/^    uint32_t reserved3;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
__anon17::reserved4	firehose/sahara_protocol.h	/^    uint32_t reserved4;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
__anon17::reserved5	firehose/sahara_protocol.h	/^    uint32_t reserved5;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
__anon17::status	firehose/sahara_protocol.h	/^    uint32_t status;                  \/\/ OK or error condition$/;"	m	struct:__anon17	access:public
__anon17::version	firehose/sahara_protocol.h	/^    uint32_t version;                 \/\/ host protocol version number$/;"	m	struct:__anon17	access:public
__anon17::version_supported	firehose/sahara_protocol.h	/^    uint32_t version_supported;       \/\/ minimum protocol version number supported$/;"	m	struct:__anon17	access:public
__anon18::data_length	firehose/sahara_protocol.h	/^    uint32_t data_length;             \/\/ length of data segment to be retreived$/;"	m	struct:__anon18	access:public
__anon18::data_offset	firehose/sahara_protocol.h	/^    uint32_t data_offset;             \/\/ offset into image file to read data from$/;"	m	struct:__anon18	access:public
__anon18::header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon18	access:public
__anon18::image_id	firehose/sahara_protocol.h	/^    uint32_t image_id;                \/\/ ID of image to be transferred$/;"	m	struct:__anon18	access:public
__anon19::data_length	firehose/sahara_protocol.h	/^    uint64_t data_length;             \/\/ length of data segment to be retreived$/;"	m	struct:__anon19	access:public
__anon19::data_offset	firehose/sahara_protocol.h	/^    uint64_t data_offset;             \/\/ offset into image file to read data from$/;"	m	struct:__anon19	access:public
__anon19::header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon19	access:public
__anon19::image_id	firehose/sahara_protocol.h	/^    uint64_t image_id;                \/\/ ID of image to be transferred$/;"	m	struct:__anon19	access:public
__anon20::header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon20	access:public
__anon20::image_id	firehose/sahara_protocol.h	/^    uint32_t image_id;                \/\/ ID of image to be transferred$/;"	m	struct:__anon20	access:public
__anon20::status	firehose/sahara_protocol.h	/^    uint32_t status;                  \/\/ OK or error condition$/;"	m	struct:__anon20	access:public
__anon21::header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon21	access:public
__anon22::header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon22	access:public
__anon22::image_tx_status	firehose/sahara_protocol.h	/^    uint32_t image_tx_status;         \/\/ indicates if all images have been$/;"	m	struct:__anon22	access:public
__anon23::header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon23	access:public
__anon24::header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon24	access:public
__anon25::cmd_code	serialif.h	/^    unsigned char cmd_code;$/;"	m	struct:__anon25	access:public
__anon25::mobile_modle_number	serialif.h	/^    unsigned char mobile_modle_number[4];$/;"	m	struct:__anon25	access:public
__anon25::mobile_software_revision	serialif.h	/^    unsigned char mobile_software_revision[1];$/;"	m	struct:__anon25	access:public
__anon25::msm	serialif.h	/^    unsigned char msm[4];$/;"	m	struct:__anon25	access:public
__anon25::reserved	serialif.h	/^    unsigned char reserved[2];$/;"	m	struct:__anon25	access:public
__anon25::version	serialif.h	/^    unsigned char version;$/;"	m	struct:__anon25	access:public
__anon26::Command	serialif.h	/^    uint32 Command;$/;"	m	struct:__anon26	access:public
__anon26::ImageID	serialif.h	/^    uint32 ImageID;$/;"	m	struct:__anon26	access:public
__anon26::Length	serialif.h	/^    uint32 Length;$/;"	m	struct:__anon26	access:public
__anon26::Status	serialif.h	/^    uint32 Status;$/;"	m	struct:__anon26	access:public
__anon27::Command	serialif.h	/^    uint32 Command;$/;"	m	struct:__anon27	access:public
__anon27::CommandPacketLength	serialif.h	/^    uint32 CommandPacketLength;$/;"	m	struct:__anon27	access:public
__anon27::Length	serialif.h	/^    uint32 Length;$/;"	m	struct:__anon27	access:public
__anon27::Mode	serialif.h	/^    uint32 Mode;$/;"	m	struct:__anon27	access:public
__anon27::Reserved	serialif.h	/^    uint32 Reserved[6];$/;"	m	struct:__anon27	access:public
__anon27::VersionCompatible	serialif.h	/^    uint32 VersionCompatible;$/;"	m	struct:__anon27	access:public
__anon27::VersionNumber	serialif.h	/^    uint32 VersionNumber;$/;"	m	struct:__anon27	access:public
__anon28::Command	serialif.h	/^    uint32 Command;$/;"	m	struct:__anon28	access:public
__anon28::DataLength	serialif.h	/^    uint32 DataLength;$/;"	m	struct:__anon28	access:public
__anon28::DataOffset	serialif.h	/^    uint32 DataOffset;$/;"	m	struct:__anon28	access:public
__anon28::ImageID	serialif.h	/^    uint32 ImageID;$/;"	m	struct:__anon28	access:public
__anon28::Length	serialif.h	/^    uint32 Length;$/;"	m	struct:__anon28	access:public
__anon29::Command	serialif.h	/^    uint32 Command;$/;"	m	struct:__anon29	access:public
__anon29::Length	serialif.h	/^    uint32 Length;$/;"	m	struct:__anon29	access:public
__anon2::finalResponse	atchannel.h	/^    char *finalResponse;      \/* eg OK, ERROR *\/$/;"	m	struct:__anon2	access:public
__anon2::p_intermediates	atchannel.h	/^    ATLine  *p_intermediates; \/* any intermediate responses *\/$/;"	m	struct:__anon2	access:public
__anon2::success	atchannel.h	/^    int success;              \/* true if final response indicates$/;"	m	struct:__anon2	access:public
__anon4::img_name	download.h	/^    char* img_name;$/;"	m	struct:__anon4	access:public
__anon4::name	download.h	/^    char* name;$/;"	m	struct:__anon4	access:public
__anon4::partition_name	download.h	/^    char* partition_name;$/;"	m	struct:__anon4	access:public
__anon7::ENPRG_path	download.h	/^    char *ENPRG_path;$/;"	m	struct:__anon7	access:public
__anon7::NPRG_path	download.h	/^    char *NPRG_path;$/;"	m	struct:__anon7	access:public
__anon7::TargetPlatform	download.h	/^    target_platform       TargetPlatform;$/;"	m	struct:__anon7	access:public
__anon7::TargetState	download.h	/^    target_current_state  TargetState;$/;"	m	struct:__anon7	access:public
__anon7::cache	download.h	/^    int cache;$/;"	m	struct:__anon7	access:public
__anon7::contents_xml_path	download.h	/^    char *contents_xml_path;$/;"	m	struct:__anon7	access:public
__anon7::diag_port	download.h	/^    char *diag_port;				\/\/diagnose port name$/;"	m	struct:__anon7	access:public
__anon7::firehose_path	download.h	/^    char *firehose_path;$/;"	m	struct:__anon7	access:public
__anon7::firehose_support	download.h	/^    int firehose_support;$/;"	m	struct:__anon7	access:public
__anon7::firmware_path	download.h	/^    char *firmware_path;\/\/save the path of the upgrade files$/;"	m	struct:__anon7	access:public
__anon7::md5_check_enable	download.h	/^    int md5_check_enable;$/;"	m	struct:__anon7	access:public
__anon7::modem_port	download.h	/^    char *modem_port;				\/\/modem port name$/;"	m	struct:__anon7	access:public
__anon7::partition_complete_mbn	download.h	/^    char *partition_complete_mbn;$/;"	m	struct:__anon7	access:public
__anon7::partition_path	download.h	/^    char *partition_path;$/;"	m	struct:__anon7	access:public
__anon7::patch_xml	download.h	/^    char *patch_xml;$/;"	m	struct:__anon7	access:public
__anon7::platform	download.h	/^    module_platform_t	platform;$/;"	m	struct:__anon7	access:public
__anon7::process_cb	download.h	/^    process_fun_t	process_cb;$/;"	m	struct:__anon7	access:public
__anon7::prodct_model	download.h	/^    char* prodct_model;$/;"	m	struct:__anon7	access:public
__anon7::prog_nand_firehose_mbn	download.h	/^    char *prog_nand_firehose_mbn;$/;"	m	struct:__anon7	access:public
__anon7::rawprogram_nand_update_xml	download.h	/^    char *rawprogram_nand_update_xml;$/;"	m	struct:__anon7	access:public
__anon7::ufile_list	download.h	/^    vector<Ufile> ufile_list;$/;"	m	struct:__anon7	access:public
__anon7::update_method	download.h	/^    int update_method;$/;"	m	struct:__anon7	access:public
_command_send	fastboot/protocol.c	/^static int _command_send(usb_handle *usb, const char *cmd,$/;"	f	file:	signature:(usb_handle *usb, const char *cmd, const void *data, unsigned size, char *response, int fd)
_md5_item	file.cpp	/^typedef struct _md5_item {$/;"	s	file:
_md5_item::filename	file.cpp	/^    std::string filename;$/;"	m	struct:_md5_item	file:	access:public
_md5_item::md5_value	file.cpp	/^    std::string md5_value;$/;"	m	struct:_md5_item	file:	access:public
a	md5.h	/^    uint32_t a, b, c, d;$/;"	m	struct:md5_ctx	access:public
action_last	fastboot/engine.c	/^static Action *action_last = 0;$/;"	v	file:
action_list	fastboot/engine.c	/^static Action *action_list = 0;$/;"	v	file:
addIntermediate	atchannel.cpp	/^static void addIntermediate(const char *line) {$/;"	f	file:	signature:(const char *line)
all_bytes_to_transfer	firehose/qfirehose.c	/^static long long all_bytes_to_transfer = 0;	\/\/need transfered$/;"	v	file:
already_running	quectel_common.cpp	/^int already_running(const char *filename) {$/;"	f	signature:(const char *filename)
already_running	quectel_common.h	/^int already_running(const char *filename);$/;"	p	signature:(const char *filename)
append	tinystr.cpp	/^TiXmlString& TiXmlString::append(const char* str, size_type len) {$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
assign	tinystr.cpp	/^TiXmlString& TiXmlString::assign(const char* str, size_type len) {$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
at_close	atchannel.cpp	/^void at_close() {$/;"	f	signature:()
at_close	atchannel.h	/^void at_close();$/;"	p
at_handshake	atchannel.h	/^int at_handshake();$/;"	p
at_open	atchannel.cpp	/^int at_open(int fd, ATUnsolHandler h) {$/;"	f	signature:(int fd, ATUnsolHandler h)
at_open	atchannel.h	/^int at_open(int fd, ATUnsolHandler h);$/;"	p	signature:(int fd, ATUnsolHandler h)
at_open	ril-daemon.c	/^extern "C" int at_open(int fd, ATUnsolHandler h);$/;"	p	file:	signature:(int fd, ATUnsolHandler h)
at_open	ril-daemon.cpp	/^extern "C" int at_open(int fd, ATUnsolHandler h);$/;"	p	file:	signature:(int fd, ATUnsolHandler h)
at_response_free	atchannel.cpp	/^void at_response_free(ATResponse *p_response) {$/;"	f	signature:(ATResponse *p_response)
at_response_free	atchannel.h	/^void at_response_free(ATResponse *p_response);$/;"	p	signature:(ATResponse *p_response)
at_response_new	atchannel.cpp	/^static ATResponse * at_response_new() {$/;"	f	file:	signature:()
at_send_command	atchannel.cpp	/^int at_send_command (const char *command, ATResponse **pp_outResponse) {$/;"	f	signature:(const char *command, ATResponse **pp_outResponse)
at_send_command	atchannel.h	/^int at_send_command (const char *command, ATResponse **pp_outResponse);$/;"	p	signature:(const char *command, ATResponse **pp_outResponse)
at_send_command_full	atchannel.cpp	/^static int at_send_command_full (const char *command, ATCommandType type,$/;"	f	file:	signature:(const char *command, ATCommandType type, const char *responsePrefix, const char *smspdu, long long timeoutMsec, ATResponse **pp_outResponse)
at_send_command_full_nolock	atchannel.cpp	/^static int at_send_command_full_nolock (const char *command, ATCommandType type,$/;"	f	file:	signature:(const char *command, ATCommandType type, const char *responsePrefix, const char *smspdu, long long timeoutMsec, ATResponse **pp_outResponse)
at_send_command_multiline	atchannel.cpp	/^int at_send_command_multiline (const char *command,$/;"	f	signature:(const char *command, const char *responsePrefix, ATResponse **pp_outResponse)
at_send_command_multiline	atchannel.h	/^int at_send_command_multiline (const char *command,$/;"	p	signature:(const char *command, const char *responsePrefix, ATResponse **pp_outResponse)
at_send_command_numeric	atchannel.cpp	/^int at_send_command_numeric (const char *command,$/;"	f	signature:(const char *command, ATResponse **pp_outResponse)
at_send_command_numeric	atchannel.h	/^int at_send_command_numeric (const char *command,$/;"	p	signature:(const char *command, ATResponse **pp_outResponse)
at_send_command_raw	atchannel.cpp	/^int at_send_command_raw (const char *command,$/;"	f	signature:(const char *command, const char *raw_data, unsigned int raw_len, const char *responsePrefix, ATResponse **pp_outResponse)
at_send_command_raw	atchannel.h	/^int at_send_command_raw (const char *command,$/;"	p	signature:(const char *command, const char *raw_data, unsigned int raw_len, const char *responsePrefix, ATResponse **pp_outResponse)
at_send_command_singleline	atchannel.cpp	/^int at_send_command_singleline (const char *command,$/;"	f	signature:(const char *command, const char *responsePrefix, ATResponse **pp_outResponse)
at_send_command_singleline	atchannel.h	/^int at_send_command_singleline (const char *command,$/;"	p	signature:(const char *command, const char *responsePrefix, ATResponse **pp_outResponse)
at_send_command_sms	atchannel.cpp	/^int at_send_command_sms (const char *command,$/;"	f	signature:(const char *command, const char *pdu, const char *responsePrefix, ATResponse **pp_outResponse)
at_send_command_sms	atchannel.h	/^int at_send_command_sms (const char *command, const char *pdu,$/;"	p	signature:(const char *command, const char *pdu, const char *responsePrefix, ATResponse **pp_outResponse)
at_set_on_reader_closed	atchannel.cpp	/^void at_set_on_reader_closed(void (*onClose)(void)) {$/;"	f	signature:(void (*onClose)(void))
at_set_on_reader_closed	atchannel.h	/^void at_set_on_reader_closed(void (*onClose)(void));$/;"	p	signature:(void (*onClose)(void))
at_set_on_timeout	atchannel.cpp	/^void at_set_on_timeout(void (*onTimeout)(void), long long timeoutMsec) {$/;"	f	signature:(void (*onTimeout)(void), long long timeoutMsec)
at_set_on_timeout	atchannel.h	/^void at_set_on_timeout(void (*onTimeout)(void), long long timeoutMsec);$/;"	p	signature:(void (*onTimeout)(void), long long timeoutMsec)
at_tok_charcounter	at_tok.c	/^int at_tok_charcounter(char *p_cur, char *target, int *p_outcount) {$/;"	f	signature:(char *p_cur, char *target, int *p_outcount)
at_tok_charcounter	at_tok.cpp	/^int at_tok_charcounter(char *p_cur, char *target, int *p_outcount) {$/;"	f	signature:(char *p_cur, char *target, int *p_outcount)
at_tok_charcounter	at_tok.h	/^int at_tok_charcounter(char *p_cur, char *target, int *p_outcount);$/;"	p	signature:(char *p_cur, char *target, int *p_outcount)
at_tok_getElementValue	at_tok.c	/^char* at_tok_getElementValue(const char *p_in, const char *beginTag, const char *endTag, char **remaining) {$/;"	f	signature:(const char *p_in, const char *beginTag, const char *endTag, char **remaining)
at_tok_getElementValue	at_tok.cpp	/^char* at_tok_getElementValue(const char *p_in, const char *beginTag, const char *endTag, char **remaining) {$/;"	f	signature:(const char *p_in, const char *beginTag, const char *endTag, char **remaining)
at_tok_getElementValue	at_tok.h	/^char* at_tok_getElementValue(const char *p_in, const char *beginTag, const char *endTag, char **remaining);$/;"	p	signature:(const char *p_in, const char *beginTag, const char *endTag, char **remaining)
at_tok_hasmore	at_tok.c	/^int at_tok_hasmore(char **p_cur) {$/;"	f	signature:(char **p_cur)
at_tok_hasmore	at_tok.cpp	/^int at_tok_hasmore(char **p_cur) {$/;"	f	signature:(char **p_cur)
at_tok_hasmore	at_tok.h	/^int at_tok_hasmore(char **p_cur);$/;"	p	signature:(char **p_cur)
at_tok_nextbool	at_tok.c	/^int at_tok_nextbool(char **p_cur, char *p_out) {$/;"	f	signature:(char **p_cur, char *p_out)
at_tok_nextbool	at_tok.cpp	/^int at_tok_nextbool(char **p_cur, char *p_out) {$/;"	f	signature:(char **p_cur, char *p_out)
at_tok_nextbool	at_tok.h	/^int at_tok_nextbool(char **p_cur, char *p_out);$/;"	p	signature:(char **p_cur, char *p_out)
at_tok_nexthexint	at_tok.c	/^int at_tok_nexthexint(char **p_cur, int *p_out) {$/;"	f	signature:(char **p_cur, int *p_out)
at_tok_nexthexint	at_tok.cpp	/^int at_tok_nexthexint(char **p_cur, int *p_out) {$/;"	f	signature:(char **p_cur, int *p_out)
at_tok_nexthexint	at_tok.h	/^int at_tok_nexthexint(char **p_cur, int *p_out);$/;"	p	signature:(char **p_cur, int *p_out)
at_tok_nextint	at_tok.c	/^int at_tok_nextint(char **p_cur, int *p_out) {$/;"	f	signature:(char **p_cur, int *p_out)
at_tok_nextint	at_tok.cpp	/^int at_tok_nextint(char **p_cur, int *p_out) {$/;"	f	signature:(char **p_cur, int *p_out)
at_tok_nextint	at_tok.h	/^int at_tok_nextint(char **p_cur, int *p_out);$/;"	p	signature:(char **p_cur, int *p_out)
at_tok_nextint_base	at_tok.c	/^static int at_tok_nextint_base(char **p_cur, int *p_out, int base, int  uns) {$/;"	f	file:	signature:(char **p_cur, int *p_out, int base, int uns)
at_tok_nextint_base	at_tok.cpp	/^static int at_tok_nextint_base(char **p_cur, int *p_out, int base, int  uns) {$/;"	f	file:	signature:(char **p_cur, int *p_out, int base, int uns)
at_tok_nextstr	at_tok.c	/^int at_tok_nextstr(char **p_cur, char **p_out) {$/;"	f	signature:(char **p_cur, char **p_out)
at_tok_nextstr	at_tok.cpp	/^int at_tok_nextstr(char **p_cur, char **p_out) {$/;"	f	signature:(char **p_cur, char **p_out)
at_tok_nextstr	at_tok.h	/^int at_tok_nextstr(char **p_cur, char **out);$/;"	p	signature:(char **p_cur, char **out)
at_tok_start	at_tok.c	/^int at_tok_start(char **p_cur) {$/;"	f	signature:(char **p_cur)
at_tok_start	at_tok.cpp	/^int at_tok_start(char **p_cur) {$/;"	f	signature:(char **p_cur)
at_tok_start	at_tok.h	/^int at_tok_start(char **p_cur);$/;"	p	signature:(char **p_cur)
b	md5.h	/^    uint32_t a, b, c, d;$/;"	m	struct:md5_ctx	access:public
bNumInterfaces	download.cpp	/^    __u8 bNumInterfaces;$/;"	m	struct:ql_usb_device	file:	access:public
bNumInterfaces	firehose/usb2tcp.c	/^    uint8_t bNumInterfaces;$/;"	m	struct:quectel_usb_device	file:	access:public
bNumInterfaces	firehose/usb_linux.c	/^    uint8_t bNumInterfaces;$/;"	m	struct:quectel_usb_device	file:	access:public
bNumInterfaces	firehose/usb_linux_firehose.c	/^    __u8 bNumInterfaces;$/;"	m	struct:ec20_usb_device	file:	access:public
badname	download.cpp	/^static inline int badname(const char *name) {$/;"	f	file:	signature:(const char *name)
badname	fastboot/usb_linux_fastboot.c	/^static inline int badname(const char *name) {$/;"	f	file:	signature:(const char *name)
badname	firehose/usb2tcp.c	/^static inline int badname(const char *name) {$/;"	f	file:	signature:(const char *name)
badname	firehose/usb_linux.c	/^static inline int badname(const char *name) {$/;"	f	file:	signature:(const char *name)
badname	firehose/usb_linux_firehose.c	/^static inline int badname(const char *name) {$/;"	f	file:	signature:(const char *name)
base_addr	fastboot/fastboot.c	/^static unsigned base_addr = 0x10000000;$/;"	v	file:
body	md5.cpp	/^static const void *body(md5_ctx_t *ctx, const void *data, unsigned long size) {$/;"	f	file:	signature:(md5_ctx_t *ctx, const void *data, unsigned long size)
boolean	platform_def.h	/^typedef bool    	 	   boolean;$/;"	t
boot_sahara_cmd_id	firehose/sahara_protocol.h	/^} boot_sahara_cmd_id;$/;"	t	typeref:enum:__anon9
boot_sahara_cmd_id	serialif.h	/^} boot_sahara_cmd_id;$/;"	t	typeref:enum:__anon30
boot_sahara_exec_cmd_id	firehose/sahara_protocol.h	/^} boot_sahara_exec_cmd_id;$/;"	t	typeref:enum:__anon13
boot_sahara_image	firehose/sahara_protocol.h	/^} boot_sahara_image;$/;"	t	typeref:enum:__anon10
boot_sahara_mode	firehose/sahara_protocol.h	/^} boot_sahara_mode;$/;"	t	typeref:enum:__anon12
boot_sahara_mode	serialif.h	/^} boot_sahara_mode;$/;"	t	typeref:enum:__anon31
boot_sahara_state	firehose/sahara_protocol.h	/^} boot_sahara_state;$/;"	t	typeref:enum:__anon14
boot_sahara_status	firehose/sahara_protocol.h	/^} boot_sahara_status;$/;"	t	typeref:enum:__anon11
boot_tmp	download.cpp	/^unsigned char *boot_tmp = boot_tmp_crc_table;$/;"	v
boot_tmp_crc_table	download.cpp	/^unsigned char boot_tmp_crc_table[1024*4] = {0};$/;"	v
boot_tmp_datasize	download.cpp	/^int boot_tmp_datasize = sizeof(boot_tmp_crc_table);$/;"	v
buffer	md5.h	/^    unsigned char buffer[64];$/;"	m	struct:md5_ctx	access:public
bulk_ep_in	download.cpp	/^    __u8 bulk_ep_in[QL_MAX_INF];$/;"	m	struct:ql_usb_device	file:	access:public
bulk_ep_in	firehose/usb2tcp.c	/^    uint8_t bulk_ep_in[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
bulk_ep_in	firehose/usb_linux.c	/^    uint8_t bulk_ep_in[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
bulk_ep_in	firehose/usb_linux_firehose.c	/^    __u8 bulk_ep_in[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	file:	access:public
bulk_ep_out	download.cpp	/^    __u8 bulk_ep_out[QL_MAX_INF];$/;"	m	struct:ql_usb_device	file:	access:public
bulk_ep_out	firehose/usb2tcp.c	/^    uint8_t bulk_ep_out[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
bulk_ep_out	firehose/usb_linux.c	/^    uint8_t bulk_ep_out[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
bulk_ep_out	firehose/usb_linux_firehose.c	/^    __u8 bulk_ep_out[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	file:	access:public
bulk_in	download.cpp	/^    struct usbdevfs_urb bulk_in[QL_MAX_INF];$/;"	m	struct:ql_usb_device	typeref:struct:ql_usb_device::usbdevfs_urb	file:	access:public
bulk_in	firehose/usb_linux_firehose.c	/^    struct usbdevfs_urb bulk_in[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	typeref:struct:ec20_usb_device::usbdevfs_urb	file:	access:public
bulk_out	download.cpp	/^    struct usbdevfs_urb bulk_out[QL_MAX_INF];$/;"	m	struct:ql_usb_device	typeref:struct:ql_usb_device::usbdevfs_urb	file:	access:public
bulk_out	firehose/usb_linux_firehose.c	/^    struct usbdevfs_urb bulk_out[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	typeref:struct:ec20_usb_device::usbdevfs_urb	file:	access:public
byte	platform_def.h	/^typedef unsigned char         byte;$/;"	t
c	md5.h	/^    uint32_t a, b, c, d;$/;"	m	struct:md5_ctx	access:public
cache	download.h	/^    int cache;$/;"	m	struct:__anon7	access:public
calc_filesizes	firehose/qfirehose.c	/^long long calc_filesizes(const char* path) {$/;"	f	signature:(const char* path)
cb_check	fastboot/engine.c	/^static int cb_check(Action *a, int status, char *resp, int invert) {$/;"	f	file:	signature:(Action *a, int status, char *resp, int invert)
cb_default	fastboot/engine.c	/^static int cb_default(Action *a, int status, char *resp) {$/;"	f	file:	signature:(Action *a, int status, char *resp)
cb_display	fastboot/engine.c	/^static int cb_display(Action *a, int status, char *resp) {$/;"	f	file:	signature:(Action *a, int status, char *resp)
cb_do_nothing	fastboot/engine.c	/^static int cb_do_nothing(Action *a, int status, char *resp) {$/;"	f	file:	signature:(Action *a, int status, char *resp)
cb_reject	fastboot/engine.c	/^static int cb_reject(Action *a, int status, char *resp) {$/;"	f	file:	signature:(Action *a, int status, char *resp)
cb_require	fastboot/engine.c	/^static int cb_require(Action *a, int status, char *resp) {$/;"	f	file:	signature:(Action *a, int status, char *resp)
cb_save	fastboot/engine.c	/^static int cb_save(Action *a, int status, char *resp) {$/;"	f	file:	signature:(Action *a, int status, char *resp)
cfg	firehose/firehose_protocol.c	/^        struct fh_configure_cmd cfg;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_configure_cmd	file:	access:public
charsplit	fastboot/usb_linux_fastboot.c	/^int charsplit(const char *src,char* desc,int n,const char* splitStr) {$/;"	f	signature:(const char *src,char* desc,int n,const char* splitStr)
charsplit	firehose/usb_linux.c	/^static int charsplit(const char *src, char* desc, int n, const char* splitStr) {$/;"	f	file:	signature:(const char *src, char* desc, int n, const char* splitStr)
charsplit	quectel_common.cpp	/^static int charsplit(const char *src,char* desc,int n,const char* splitStr) {$/;"	f	file:	signature:(const char *src,char* desc,int n,const char* splitStr)
check	check_env.cpp	/^bool check(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
check	fastboot/usb_linux_fastboot.c	/^static int check(void *_desc, int len, unsigned type, int size) {$/;"	f	file:	signature:(void *_desc, int len, unsigned type, int size)
check	os_linux.cpp	/^extern bool check(int argc, char *argv[]);$/;"	p	file:	signature:(int argc, char *argv[])
checkCPU	fastboot/fastboot.c	/^int checkCPU() {$/;"	f
checkCPU	quectel_common.cpp	/^int checkCPU() {$/;"	f	signature:()
checkCPU	quectel_common.h	/^int checkCPU();$/;"	p
check_env	check_env.cpp	/^bool check_env()$/;"	f	signature:()
check_file_md5_value	file.cpp	/^static int check_file_md5_value(char* filename, std::vector<md5_item>& md5_vec) {$/;"	f	file:	signature:(char* filename, std::vector<md5_item>& md5_vec)
check_input	check_env.cpp	/^bool check_input(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
check_response	fastboot/protocol.c	/^static int check_response(usb_handle *usb, unsigned size,$/;"	f	file:	signature:(usb_handle *usb, unsigned size, unsigned data_okay, char *response)
clean_buffer	serialif.cpp	/^static void clean_buffer(void) {$/;"	f	file:	signature:(void)
clean_up_child_process	ril-daemon.c	/^static void clean_up_child_process(int signal_num) {$/;"	f	file:	signature:(int signal_num)
clean_up_child_process	ril-daemon.cpp	/^static void clean_up_child_process(int signal_num) {$/;"	f	file:	signature:(int signal_num)
clearPendingCommand	atchannel.cpp	/^static void clearPendingCommand() {$/;"	f	file:	signature:()
close_and_reopen	download.cpp	/^static int close_and_reopen(int ioflush) {$/;"	f	file:	signature:(int ioflush)
close_and_reopen_without_wait	download.cpp	/^static int close_and_reopen_without_wait(int ioflush, int disconnect_wait_timeout, int connect_wait_timeout) {$/;"	f	file:	signature:(int ioflush, int disconnect_wait_timeout, int connect_wait_timeout)
closeport	os_linux.cpp	/^int closeport() {$/;"	f	signature:()
closeport	os_linux.h	/^int closeport();$/;"	p
cmd	fastboot/engine.c	/^    char cmd[64];$/;"	m	struct:Action	file:	access:public
cmd	firehose/firehose_protocol.c	/^        struct fh_cmd_header cmd;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_cmd_header	file:	access:public
cmd_code	serialif.h	/^    unsigned char cmd_code;$/;"	m	struct:__anon25	access:public
cmd_packet_length	firehose/sahara_protocol.h	/^    uint32_t cmd_packet_length;       \/\/ maximum packet size supported for command$/;"	m	struct:__anon16	access:public
cmdline	fastboot/fastboot.c	/^static const char *cmdline = 0;$/;"	v	file:
col	tinyxml.h	/^    int col;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
command	firehose/sahara_protocol.h	/^    uint32_t command;                 \/\/ command ID$/;"	m	struct:__anon15	access:public
compose_packet	serialif.cpp	/^static void compose_packet(unsigned char cmd, unsigned char *parameter, uint32 parameter_len, unsigned char *data, uint32 data_len) {$/;"	f	file:	signature:(unsigned char cmd, unsigned char *parameter, uint32 parameter_len, unsigned char *data, uint32 data_len)
compute_reply_crc	serialif.cpp	/^void  compute_reply_crc () {$/;"	f	signature:()
condenseWhiteSpace	tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
config_uart	os_linux.cpp	/^static int config_uart(int fd, int ioflush) {$/;"	f	file:	signature:(int fd, int ioflush)
constantly_schedule	download.cpp	/^extern int constantly_schedule(const char *fileName);$/;"	p	file:	signature:(const char *fileName)
constantly_schedule	file.cpp	/^int constantly_schedule(const char *fileName) {$/;"	f	signature:(const char *fileName)
contents_xml_path	download.h	/^    char *contents_xml_path;$/;"	m	struct:__anon7	access:public
control	download.cpp	/^    int control[QL_MAX_INF][2];$/;"	m	struct:ql_usb_device	file:	access:public
control	firehose/usb2tcp.c	/^    int control[EC20_MAX_INF][2];$/;"	m	struct:quectel_usb_device	file:	access:public
control	firehose/usb_linux.c	/^    int control[EC20_MAX_INF][2];$/;"	m	struct:quectel_usb_device	file:	access:public
control	firehose/usb_linux_firehose.c	/^    int control[EC20_MAX_INF][2];$/;"	m	struct:ec20_usb_device	file:	access:public
convert_to_devfs_name	fastboot/usb_linux_fastboot.c	/^static int convert_to_devfs_name(const char* sysfs_name,$/;"	f	file:	signature:(const char* sysfs_name, char* devname, int devname_size)
crc_16_l_calc	quectel_crc.cpp	/^unsigned short crc_16_l_calc(unsigned char *buf_ptr, int len) {$/;"	f	signature:(unsigned char *buf_ptr, int len)
crc_16_l_calc	quectel_crc.h	/^unsigned short crc_16_l_calc(unsigned char *buf_ptr, int len);$/;"	p	signature:(unsigned char *buf_ptr, int len)
crc_16_l_table	quectel_crc.cpp	/^const unsigned short crc_16_l_table[ CRC_TAB_SIZE ] = {$/;"	v
create_node	firehose/usb_linux.c	/^int create_node(void) {$/;"	f	signature:(void)
create_tcp_server	firehose/usb2tcp.c	/^static int create_tcp_server(int socket_port) {$/;"	f	file:	signature:(int socket_port)
cumulation_files_size	file.cpp	/^unsigned long cumulation_files_size(const char *fileName) {$/;"	f	signature:(const char *fileName)
cur_product	fastboot/fastboot.c	/^char cur_product[FB_RESPONSE_SZ + 1];$/;"	v
cursor	tinyxmlparser.cpp	/^    TiXmlCursor		cursor;$/;"	m	class:TiXmlParsingData	file:	access:private
d	md5.h	/^    uint32_t a, b, c, d;$/;"	m	struct:md5_ctx	access:public
data	fastboot/engine.c	/^    void *data;$/;"	m	struct:Action	file:	access:public
data_length	firehose/sahara_protocol.h	/^    uint32_t data_length;             \/\/ length of data segment to be retreived$/;"	m	struct:__anon18	access:public
data_length	firehose/sahara_protocol.h	/^    uint64_t data_length;             \/\/ length of data segment to be retreived$/;"	m	struct:__anon19	access:public
data_offset	firehose/sahara_protocol.h	/^    uint32_t data_offset;             \/\/ offset into image file to read data from$/;"	m	struct:__anon18	access:public
data_offset	firehose/sahara_protocol.h	/^    uint64_t data_offset;             \/\/ offset into image file to read data from$/;"	m	struct:__anon19	access:public
dbg	firehose/sahara_protocol.c	18;"	d	file:
dbg_time	firehose/usb2tcp.c	30;"	d	file:
dbg_time	firehose/usb_linux.c	/^void dbg_time (const char *fmt, ...) {$/;"	f	signature:(const char *fmt, ...)
dbg_time	firehose/usb_linux.h	/^void dbg_time (const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
dbg_time	firehose/usb_linux_firehose.c	/^void dbg_time (const char *fmt, ...);$/;"	p	file:	signature:(const char *fmt, ...)
dbg_time	quectel_log.cpp	/^void dbg_time (const char *fmt, ...) {$/;"	f	signature:(const char *fmt, ...)
dbg_time	quectel_log.h	/^void dbg_time (const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
desc	download.cpp	/^    int desc;$/;"	m	struct:ql_usb_device	file:	access:public
desc	fastboot/usb_linux_fastboot.c	/^    int desc;$/;"	m	struct:usb_handle	file:	access:public
desc	firehose/usb2tcp.c	/^    int desc;$/;"	m	struct:quectel_usb_device	file:	access:public
desc	firehose/usb_linux.c	/^    int desc;$/;"	m	struct:quectel_usb_device	file:	access:public
desc	firehose/usb_linux_firehose.c	/^    int desc;$/;"	m	struct:ec20_usb_device	file:	access:public
detect_adb	quectel_common.cpp	/^int detect_adb() {$/;"	f	signature:()
detect_adb	quectel_common.h	/^int detect_adb();$/;"	p
detect_diag_port	quectel_common.cpp	/^int detect_diag_port() {$/;"	f	signature:()
detect_diag_port	quectel_common.cpp	/^int detect_diag_port(char **diag_port) {$/;"	f	signature:(char **diag_port)
detect_diag_port	quectel_common.h	/^int detect_diag_port();$/;"	p
detect_diag_port	quectel_common.h	/^int detect_diag_port(char **diag_port);$/;"	p	signature:(char **diag_port)
detect_diag_port_timeout	quectel_common.cpp	/^int detect_diag_port_timeout(int timeout) {$/;"	f	signature:(int timeout)
detect_diag_port_timeout	quectel_common.h	/^int detect_diag_port_timeout(int timeout);$/;"	p	signature:(int timeout)
detect_modem_port	quectel_common.cpp	/^int detect_modem_port(char **modem_port) {$/;"	f	signature:(char **modem_port)
detect_modem_port	quectel_common.h	/^int detect_modem_port(char **modem_port);$/;"	p	signature:(char **modem_port)
dev_class	fastboot/usb.h	/^    unsigned char dev_class;$/;"	m	struct:usb_ifc_info	access:public
dev_product	fastboot/usb.h	/^    unsigned short dev_product;$/;"	m	struct:usb_ifc_info	access:public
dev_protocol	fastboot/usb.h	/^    unsigned char dev_protocol;$/;"	m	struct:usb_ifc_info	access:public
dev_subclass	fastboot/usb.h	/^    unsigned char dev_subclass;$/;"	m	struct:usb_ifc_info	access:public
dev_vendor	fastboot/usb.h	/^    unsigned short dev_vendor;$/;"	m	struct:usb_ifc_info	access:public
device_path	fastboot/usb.h	/^    char device_path[256];$/;"	m	struct:usb_ifc_info	access:public
devname	firehose/usb2tcp.c	/^    char devname[64];$/;"	m	struct:quectel_usb_device	file:	access:public
devname	firehose/usb_linux.c	/^    char devname[64];$/;"	m	struct:quectel_usb_device	file:	access:public
diag_port	download.h	/^    char *diag_port;				\/\/diagnose port name$/;"	m	struct:__anon7	access:public
die	fastboot/fastboot.c	/^void die(const char *fmt, ...) {$/;"	f	signature:(const char *fmt, ...)
die	fastboot/fastboot.h	/^void die(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
dloadbuf	serialif.cpp	/^unsigned char  dloadbuf[250];$/;"	v
do_fastboot	download.cpp	/^static int do_fastboot(const char *cmd, const char *partion, const char *filepath) {$/;"	f	file:	signature:(const char *cmd, const char *partion, const char *filepath)
do_fastboot_download	download.cpp	/^int do_fastboot_download(download_context *pQdlContext) {$/;"	f	signature:(download_context *pQdlContext)
do_fastboot_download	download.cpp	/^int do_fastboot_download(download_context *pQdlContext);$/;"	p	file:	signature:(download_context *pQdlContext)
do_fastboot_download_direct	download.cpp	/^int do_fastboot_download_direct(download_context *pQdlContext) {$/;"	f	signature:(download_context *pQdlContext)
do_fastboot_download_direct	download.cpp	/^int do_fastboot_download_direct(download_context *pQdlContext);$/;"	p	file:	signature:(download_context *pQdlContext)
do_firehose	download.cpp	/^static int do_firehose(const char* cmd, const char* path) {$/;"	f	file:	signature:(const char* cmd, const char* path)
do_flash_mbn	download.cpp	/^static int do_flash_mbn(const char *partion, const char *filepath) {$/;"	f	file:	signature:(const char *partion, const char *filepath)
do_oem_command	fastboot/fastboot.c	/^int do_oem_command(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
do_streaming_download	download.cpp	/^int do_streaming_download(download_context *pQdlContext) {$/;"	f	signature:(download_context *pQdlContext)
do_streaming_download	download.cpp	/^int do_streaming_download(download_context *pQdlContext);$/;"	p	file:	signature:(download_context *pQdlContext)
download_context	download.h	/^} download_context, *p_download_context;$/;"	t	typeref:struct:__anon7
downloadfastboot	download.cpp	/^int downloadfastboot(download_context *pQdlContext) {$/;"	f	signature:(download_context *pQdlContext)
dprintf	firehose/usb2tcp.c	29;"	d	file:
dump	os_linux.cpp	/^int dump = 0;$/;"	v
dump_buffer	serialif.cpp	/^void dump_buffer(unsigned char * buff, int len) {$/;"	f	signature:(unsigned char * buff, int len)
dump_sys_info	download.cpp	/^void dump_sys_info() {$/;"	f	signature:()
dump_sys_info	download.h	/^void dump_sys_info();$/;"	p
ec20_device	firehose/usb_linux_firehose.c	/^static struct ec20_usb_device ec20_device;$/;"	v	typeref:struct:ec20_usb_device	file:
ec20_usb_device	firehose/usb_linux_firehose.c	/^struct ec20_usb_device$/;"	s	file:
ec20_usb_device::bNumInterfaces	firehose/usb_linux_firehose.c	/^    __u8 bNumInterfaces;$/;"	m	struct:ec20_usb_device	file:	access:public
ec20_usb_device::bulk_ep_in	firehose/usb_linux_firehose.c	/^    __u8 bulk_ep_in[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	file:	access:public
ec20_usb_device::bulk_ep_out	firehose/usb_linux_firehose.c	/^    __u8 bulk_ep_out[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	file:	access:public
ec20_usb_device::bulk_in	firehose/usb_linux_firehose.c	/^    struct usbdevfs_urb bulk_in[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	typeref:struct:ec20_usb_device::usbdevfs_urb	file:	access:public
ec20_usb_device::bulk_out	firehose/usb_linux_firehose.c	/^    struct usbdevfs_urb bulk_out[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	typeref:struct:ec20_usb_device::usbdevfs_urb	file:	access:public
ec20_usb_device::control	firehose/usb_linux_firehose.c	/^    int control[EC20_MAX_INF][2];$/;"	m	struct:ec20_usb_device	file:	access:public
ec20_usb_device::desc	firehose/usb_linux_firehose.c	/^    int desc;$/;"	m	struct:ec20_usb_device	file:	access:public
ec20_usb_device::fname	firehose/usb_linux_firehose.c	/^    char fname[64];$/;"	m	struct:ec20_usb_device	file:	access:public
ec20_usb_device::idProduct	firehose/usb_linux_firehose.c	/^    __le16 idProduct;$/;"	m	struct:ec20_usb_device	file:	access:public
ec20_usb_device::idVendor	firehose/usb_linux_firehose.c	/^    __le16 idVendor;$/;"	m	struct:ec20_usb_device	file:	access:public
ec20_usb_device::intr_ep	firehose/usb_linux_firehose.c	/^    __u8 intr_ep[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	file:	access:public
ec20_usb_device::wMaxPacketSize	firehose/usb_linux_firehose.c	/^    __le16 wMaxPacketSize[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	file:	access:public
end_my	serialif.cpp	/^timeval start_my,end_my;$/;"	v
end_of_image_transfer_packet_t	serialif.h	/^} __attribute__((packed))end_of_image_transfer_packet_t;$/;"	t	typeref:struct:__anon26
endian_flag	fastboot/fastboot.c	/^int endian_flag;$/;"	v
endian_flag	os_linux.cpp	/^int endian_flag = 0;$/;"	v
entity	tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ TiXmlBase::NUM_ENTITY ] = {$/;"	m	class:TiXmlBase	file:
ep_in	fastboot/usb_linux_fastboot.c	/^    unsigned char ep_in;$/;"	m	struct:usb_handle	file:	access:public
ep_out	fastboot/usb_linux_fastboot.c	/^    unsigned char ep_out;$/;"	m	struct:usb_handle	file:	access:public
erase	firehose/firehose_protocol.c	/^        struct fh_erase_cmd erase;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_erase_cmd	file:	access:public
errorString	tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TiXmlBase::TIXML_ERROR_STRING_COUNT ] = {$/;"	m	class:TiXmlBase	file:
error_return	firehose/firehose_protocol.c	3;"	d	file:
error_return	firehose/qfirehose.c	27;"	d	file:
extended_build_id_response_t	serialif.h	/^} __attribute__ ((packed))extended_build_id_response_t;$/;"	t	typeref:struct:__anon25
fastboot_main	fastboot/fastboot.c	/^int fastboot_main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
fastboot_main	fastboot/fastboot.h	/^extern int fastboot_main(int argc, char **argv);$/;"	p	signature:(int argc, char **argv)
fastboot_main	os_linux.cpp	/^extern "C" int fastboot_main(int argc, char **argv);$/;"	p	file:	signature:(int argc, char **argv)
fb_command	fastboot/fastboot.h	/^int fb_command(usb_handle *usb, const char *cmd);$/;"	p	signature:(usb_handle *usb, const char *cmd)
fb_command	fastboot/protocol.c	/^int fb_command(usb_handle *usb, const char *cmd) {$/;"	f	signature:(usb_handle *usb, const char *cmd)
fb_command_response	fastboot/fastboot.h	/^int fb_command_response(usb_handle *usb, const char *cmd, char *response);$/;"	p	signature:(usb_handle *usb, const char *cmd, char *response)
fb_command_response	fastboot/protocol.c	/^int fb_command_response(usb_handle *usb, const char *cmd, char *response) {$/;"	f	signature:(usb_handle *usb, const char *cmd, char *response)
fb_download_data	fastboot/fastboot.h	/^int fb_download_data(usb_handle *usb, const void *data, unsigned size, int fd);$/;"	p	signature:(usb_handle *usb, const void *data, unsigned size, int fd)
fb_download_data	fastboot/protocol.c	/^int fb_download_data(usb_handle *usb, const void *data, unsigned size, int fd) {$/;"	f	signature:(usb_handle *usb, const void *data, unsigned size, int fd)
fb_execute_queue	fastboot/engine.c	/^int fb_execute_queue(usb_handle *usb) {$/;"	f	signature:(usb_handle *usb)
fb_execute_queue	fastboot/fastboot.h	/^int fb_execute_queue(usb_handle *usb);$/;"	p	signature:(usb_handle *usb)
fb_get_error	fastboot/fastboot.h	/^char *fb_get_error(void);$/;"	p	signature:(void)
fb_get_error	fastboot/protocol.c	/^char *fb_get_error(void) {$/;"	f	signature:(void)
fb_lqueue_destroy	fastboot/engine.c	/^void fb_lqueue_destroy() {$/;"	f
fb_lqueue_destroy	fastboot/fastboot.h	/^void fb_lqueue_destroy();$/;"	p
fb_queue_command	fastboot/engine.c	/^void fb_queue_command(const char *cmd, const char *msg) {$/;"	f	signature:(const char *cmd, const char *msg)
fb_queue_command	fastboot/fastboot.h	/^void fb_queue_command(const char *cmd, const char *msg);$/;"	p	signature:(const char *cmd, const char *msg)
fb_queue_display	fastboot/engine.c	/^void fb_queue_display(const char *var, const char *prettyname) {$/;"	f	signature:(const char *var, const char *prettyname)
fb_queue_display	fastboot/fastboot.h	/^void fb_queue_display(const char *var, const char *prettyname);$/;"	p	signature:(const char *var, const char *prettyname)
fb_queue_download	fastboot/engine.c	/^void fb_queue_download(const char *name, void *data, unsigned size) {$/;"	f	signature:(const char *name, void *data, unsigned size)
fb_queue_download	fastboot/fastboot.h	/^void fb_queue_download(const char *name, void *data, unsigned size);$/;"	p	signature:(const char *name, void *data, unsigned size)
fb_queue_erase	fastboot/engine.c	/^void fb_queue_erase(const char *ptn) {$/;"	f	signature:(const char *ptn)
fb_queue_erase	fastboot/fastboot.h	/^void fb_queue_erase(const char *ptn);$/;"	p	signature:(const char *ptn)
fb_queue_flash	fastboot/engine.c	/^void fb_queue_flash(const char *ptn, void *data, unsigned sz, int fd) {$/;"	f	signature:(const char *ptn, void *data, unsigned sz, int fd)
fb_queue_flash	fastboot/fastboot.h	/^void fb_queue_flash(const char *ptn, void *data, unsigned sz, int fd);$/;"	p	signature:(const char *ptn, void *data, unsigned sz, int fd)
fb_queue_notice	fastboot/engine.c	/^void fb_queue_notice(const char *notice) {$/;"	f	signature:(const char *notice)
fb_queue_notice	fastboot/fastboot.h	/^void fb_queue_notice(const char *notice);$/;"	p	signature:(const char *notice)
fb_queue_query_save	fastboot/engine.c	/^void fb_queue_query_save(const char *var, char *dest, unsigned dest_size) {$/;"	f	signature:(const char *var, char *dest, unsigned dest_size)
fb_queue_query_save	fastboot/fastboot.h	/^void fb_queue_query_save(const char *var, char *dest, unsigned dest_size);$/;"	p	signature:(const char *var, char *dest, unsigned dest_size)
fb_queue_reboot	fastboot/engine.c	/^void fb_queue_reboot(void) {$/;"	f	signature:(void)
fb_queue_reboot	fastboot/fastboot.h	/^void fb_queue_reboot(void);$/;"	p	signature:(void)
fb_queue_require	fastboot/engine.c	/^void fb_queue_require(const char *prod, const char *var,$/;"	f	signature:(const char *prod, const char *var, int invert, unsigned nvalues, const char **value)
fb_queue_require	fastboot/fastboot.h	/^void fb_queue_require(const char *prod, const char *var, int invert,$/;"	p	signature:(const char *prod, const char *var, int invert, unsigned nvalues, const char **value)
fd	fastboot/engine.c	/^    int fd;$/;"	m	struct:Action	file:	access:public
fh_cmd	firehose/firehose_protocol.c	/^struct fh_cmd {$/;"	s	file:
fh_cmd::__anon8::cfg	firehose/firehose_protocol.c	/^        struct fh_configure_cmd cfg;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_configure_cmd	file:	access:public
fh_cmd::__anon8::cmd	firehose/firehose_protocol.c	/^        struct fh_cmd_header cmd;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_cmd_header	file:	access:public
fh_cmd::__anon8::erase	firehose/firehose_protocol.c	/^        struct fh_erase_cmd erase;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_erase_cmd	file:	access:public
fh_cmd::__anon8::log	firehose/firehose_protocol.c	/^        struct fh_log_cmd log;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_log_cmd	file:	access:public
fh_cmd::__anon8::program	firehose/firehose_protocol.c	/^        struct fh_program_cmd program;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_program_cmd	file:	access:public
fh_cmd::__anon8::response	firehose/firehose_protocol.c	/^        struct fh_response_cmd response;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_response_cmd	file:	access:public
fh_cmd_count	firehose/firehose_protocol.c	/^    unsigned fh_cmd_count;$/;"	m	struct:fh_data	file:	access:public
fh_cmd_header	firehose/firehose_protocol.c	/^struct fh_cmd_header {$/;"	s	file:
fh_cmd_header::type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_cmd_header	file:	access:public
fh_cmd_table	firehose/firehose_protocol.c	/^    struct fh_cmd fh_cmd_table[32];$/;"	m	struct:fh_data	typeref:struct:fh_data::fh_cmd	file:	access:public
fh_configure_cmd	firehose/firehose_protocol.c	/^struct fh_configure_cmd {$/;"	s	file:
fh_configure_cmd::AlwaysValidate	firehose/firehose_protocol.c	/^    uint32_t AlwaysValidate;$/;"	m	struct:fh_configure_cmd	file:	access:public
fh_configure_cmd::MaxDigestTableSizeInBytes	firehose/firehose_protocol.c	/^    uint32_t MaxDigestTableSizeInBytes;$/;"	m	struct:fh_configure_cmd	file:	access:public
fh_configure_cmd::MaxPayloadSizeFromTargetInBytes	firehose/firehose_protocol.c	/^    uint32_t MaxPayloadSizeFromTargetInBytes ; 			\/\/2048$/;"	m	struct:fh_configure_cmd	file:	access:public
fh_configure_cmd::MaxPayloadSizeToTargetInByteSupported	firehose/firehose_protocol.c	/^    uint32_t MaxPayloadSizeToTargetInByteSupported;		\/\/16k$/;"	m	struct:fh_configure_cmd	file:	access:public
fh_configure_cmd::MaxPayloadSizeToTargetInBytes	firehose/firehose_protocol.c	/^    uint32_t MaxPayloadSizeToTargetInBytes;$/;"	m	struct:fh_configure_cmd	file:	access:public
fh_configure_cmd::MemoryName	firehose/firehose_protocol.c	/^    const char *MemoryName;$/;"	m	struct:fh_configure_cmd	file:	access:public
fh_configure_cmd::SkipStorageInit	firehose/firehose_protocol.c	/^    uint32_t SkipStorageInit;$/;"	m	struct:fh_configure_cmd	file:	access:public
fh_configure_cmd::Verbose	firehose/firehose_protocol.c	/^    uint32_t Verbose;$/;"	m	struct:fh_configure_cmd	file:	access:public
fh_configure_cmd::ZlpAwareHost	firehose/firehose_protocol.c	/^    uint32_t ZlpAwareHost;$/;"	m	struct:fh_configure_cmd	file:	access:public
fh_configure_cmd::type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_configure_cmd	file:	access:public
fh_data	firehose/firehose_protocol.c	/^struct fh_data {$/;"	s	file:
fh_data::MaxPayloadSizeToTargetInBytes	firehose/firehose_protocol.c	/^    unsigned MaxPayloadSizeToTargetInBytes;$/;"	m	struct:fh_data	file:	access:public
fh_data::ZlpAwareHost	firehose/firehose_protocol.c	/^    unsigned ZlpAwareHost;$/;"	m	struct:fh_data	file:	access:public
fh_data::fh_cmd_count	firehose/firehose_protocol.c	/^    unsigned fh_cmd_count;$/;"	m	struct:fh_data	file:	access:public
fh_data::fh_cmd_table	firehose/firehose_protocol.c	/^    struct fh_cmd fh_cmd_table[32];$/;"	m	struct:fh_data	typeref:struct:fh_data::fh_cmd	file:	access:public
fh_data::firehose_dir	firehose/firehose_protocol.c	/^    const char *firehose_dir;$/;"	m	struct:fh_data	file:	access:public
fh_data::usb_handle	firehose/firehose_protocol.c	/^    const void *usb_handle;$/;"	m	struct:fh_data	file:	access:public
fh_data::xml_buf	firehose/firehose_protocol.c	/^    char xml_buf[1024];$/;"	m	struct:fh_data	file:	access:public
fh_data::xml_size	firehose/firehose_protocol.c	/^    unsigned xml_size;$/;"	m	struct:fh_data	file:	access:public
fh_erase_cmd	firehose/firehose_protocol.c	/^struct fh_erase_cmd {$/;"	s	file:
fh_erase_cmd::PAGES_PER_BLOCK	firehose/firehose_protocol.c	/^    uint32_t PAGES_PER_BLOCK;$/;"	m	struct:fh_erase_cmd	file:	access:public
fh_erase_cmd::SECTOR_SIZE_IN_BYTES	firehose/firehose_protocol.c	/^    uint32_t SECTOR_SIZE_IN_BYTES;$/;"	m	struct:fh_erase_cmd	file:	access:public
fh_erase_cmd::label	firehose/firehose_protocol.c	/^    char label[32];$/;"	m	struct:fh_erase_cmd	file:	access:public
fh_erase_cmd::last_sector	firehose/firehose_protocol.c	/^    uint32_t last_sector;$/;"	m	struct:fh_erase_cmd	file:	access:public
fh_erase_cmd::num_partition_sectors	firehose/firehose_protocol.c	/^    uint32_t num_partition_sectors;$/;"	m	struct:fh_erase_cmd	file:	access:public
fh_erase_cmd::physical_partition_number	firehose/firehose_protocol.c	/^    uint32_t physical_partition_number;$/;"	m	struct:fh_erase_cmd	file:	access:public
fh_erase_cmd::start_sector	firehose/firehose_protocol.c	/^    uint32_t start_sector;$/;"	m	struct:fh_erase_cmd	file:	access:public
fh_erase_cmd::type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_erase_cmd	file:	access:public
fh_fixup_program_cmd	firehose/firehose_protocol.c	/^static int fh_fixup_program_cmd(struct fh_data *fh_data, struct fh_cmd *fh_cmd, long* filesize_out) {$/;"	f	file:	signature:(struct fh_data *fh_data, struct fh_cmd *fh_cmd, long* filesize_out)
fh_log_cmd	firehose/firehose_protocol.c	/^struct fh_log_cmd {$/;"	s	file:
fh_log_cmd::type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_log_cmd	file:	access:public
fh_parse_xml_file	firehose/firehose_protocol.c	/^static int fh_parse_xml_file(struct fh_data *fh_data, const char *xml_file) {$/;"	f	file:	signature:(struct fh_data *fh_data, const char *xml_file)
fh_parse_xml_line	firehose/firehose_protocol.c	/^static int fh_parse_xml_line(const char *xml_line, struct fh_cmd *fh_cmd) {$/;"	f	file:	signature:(const char *xml_line, struct fh_cmd *fh_cmd)
fh_program_cmd	firehose/firehose_protocol.c	/^struct fh_program_cmd {$/;"	s	file:
fh_program_cmd::PAGES_PER_BLOCK	firehose/firehose_protocol.c	/^    uint32_t PAGES_PER_BLOCK;$/;"	m	struct:fh_program_cmd	file:	access:public
fh_program_cmd::SECTOR_SIZE_IN_BYTES	firehose/firehose_protocol.c	/^    uint32_t SECTOR_SIZE_IN_BYTES;$/;"	m	struct:fh_program_cmd	file:	access:public
fh_program_cmd::filename	firehose/firehose_protocol.c	/^    char *filename;$/;"	m	struct:fh_program_cmd	file:	access:public
fh_program_cmd::label	firehose/firehose_protocol.c	/^    char label[32];$/;"	m	struct:fh_program_cmd	file:	access:public
fh_program_cmd::last_sector	firehose/firehose_protocol.c	/^    uint32_t last_sector;$/;"	m	struct:fh_program_cmd	file:	access:public
fh_program_cmd::num_partition_sectors	firehose/firehose_protocol.c	/^    uint32_t num_partition_sectors;$/;"	m	struct:fh_program_cmd	file:	access:public
fh_program_cmd::physical_partition_number	firehose/firehose_protocol.c	/^    uint32_t physical_partition_number;$/;"	m	struct:fh_program_cmd	file:	access:public
fh_program_cmd::start_sector	firehose/firehose_protocol.c	/^    uint32_t start_sector;$/;"	m	struct:fh_program_cmd	file:	access:public
fh_program_cmd::type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_program_cmd	file:	access:public
fh_recv_cmd	firehose/firehose_protocol.c	/^static int fh_recv_cmd(struct fh_data *fh_data, struct fh_cmd *fh_cmd, unsigned timeout) {$/;"	f	file:	signature:(struct fh_data *fh_data, struct fh_cmd *fh_cmd, unsigned timeout)
fh_response_cmd	firehose/firehose_protocol.c	/^struct fh_response_cmd {$/;"	s	file:
fh_response_cmd::MaxPayloadSizeToTargetInBytes	firehose/firehose_protocol.c	/^    uint32_t MaxPayloadSizeToTargetInBytes;$/;"	m	struct:fh_response_cmd	file:	access:public
fh_response_cmd::rawmode	firehose/firehose_protocol.c	/^    uint32_t rawmode;$/;"	m	struct:fh_response_cmd	file:	access:public
fh_response_cmd::type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_response_cmd	file:	access:public
fh_response_cmd::value	firehose/firehose_protocol.c	/^    const char *value;$/;"	m	struct:fh_response_cmd	file:	access:public
fh_send_cfg_cmd	firehose/firehose_protocol.c	/^static int fh_send_cfg_cmd(struct fh_data *fh_data) {$/;"	f	file:	signature:(struct fh_data *fh_data)
fh_send_cmd	firehose/firehose_protocol.c	/^static int fh_send_cmd(struct fh_data *fh_data, const struct fh_cmd *fh_cmd) {$/;"	f	file:	signature:(struct fh_data *fh_data, const struct fh_cmd *fh_cmd)
fh_send_rawmode_image	firehose/firehose_protocol.c	/^static int fh_send_rawmode_image(struct fh_data *fh_data, const struct fh_cmd *fh_cmd, unsigned timeout) {$/;"	f	file:	signature:(struct fh_data *fh_data, const struct fh_cmd *fh_cmd, unsigned timeout)
fh_send_reset_cmd	firehose/firehose_protocol.c	/^static int fh_send_reset_cmd(struct fh_data *fh_data) {$/;"	f	file:	signature:(struct fh_data *fh_data)
fh_wait_response_cmd	firehose/firehose_protocol.c	/^static int fh_wait_response_cmd(struct fh_data *fh_data, struct fh_cmd *fh_cmd, unsigned timeout) {$/;"	f	file:	signature:(struct fh_data *fh_data, struct fh_cmd *fh_cmd, unsigned timeout)
fh_xml_get_value	firehose/firehose_protocol.c	/^static const char * fh_xml_get_value(const char *xml_line, const char *key) {$/;"	f	file:	signature:(const char *xml_line, const char *key)
filename	file.cpp	/^    std::string filename;$/;"	m	struct:_md5_item	file:	access:public
filename	firehose/firehose_protocol.c	/^    char *filename;$/;"	m	struct:fh_program_cmd	file:	access:public
filter_usb_device	fastboot/usb_linux_fastboot.c	/^static int filter_usb_device(char* sysfs_name,$/;"	f	file:	signature:(char* sysfs_name, char *ptr, int len, int writable, ifc_match_func callback, int *ept_in_id, int *ept_out_id, int *ifc_id)
finalResponse	atchannel.h	/^    char *finalResponse;      \/* eg OK, ERROR *\/$/;"	m	struct:__anon2	access:public
findNextEOL	atchannel.cpp	/^static char * findNextEOL(char *cur) {$/;"	f	file:	signature:(char *cur)
find_item	fastboot/fastboot.c	/^char *find_item(const char *item, const char *product) {$/;"	f	signature:(const char *item, const char *product)
find_usb_device	fastboot/usb_linux_fastboot.c	/^static usb_handle *find_usb_device(const char *base, ifc_match_func callback) {$/;"	f	file:	signature:(const char *base, ifc_match_func callback)
firehose_dir	firehose/firehose_protocol.c	/^    const char *firehose_dir;$/;"	m	struct:fh_data	file:	access:public
firehose_get_time	firehose/usb_linux.c	/^static const char * firehose_get_time(void) {$/;"	f	file:	signature:(void)
firehose_main	firehose/firehose_protocol.c	/^int firehose_main (const char *firehose_dir, void *usb_handle, unsigned qusb_zlp_mode) {$/;"	f	signature:(const char *firehose_dir, void *usb_handle, unsigned qusb_zlp_mode)
firehose_main	firehose/qfirehose.c	/^int firehose_main (const char *firehose_dir, void *usb_handle, unsigned qusb_zlp_mode);$/;"	p	file:	signature:(const char *firehose_dir, void *usb_handle, unsigned qusb_zlp_mode)
firehose_main_entry	firehose/qfirehose.c	/^int firehose_main_entry(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
firehose_main_entry	os_linux.cpp	/^extern "C" int firehose_main_entry(int argc, char **argv);$/;"	p	file:	signature:(int argc, char **argv)
firehose_path	download.h	/^    char *firehose_path;$/;"	m	struct:__anon7	access:public
firehose_support	download.h	/^    int firehose_support;$/;"	m	struct:__anon7	access:public
firmware_path	download.h	/^    char *firmware_path;\/\/save the path of the upgrade files$/;"	m	struct:__anon7	access:public
fname	download.cpp	/^    char fname[64];$/;"	m	struct:ql_usb_device	file:	access:public
fname	fastboot/usb_linux_fastboot.c	/^    char fname[64];$/;"	m	struct:usb_handle	file:	access:public
fname	firehose/usb_linux_firehose.c	/^    char fname[64];$/;"	m	struct:ec20_usb_device	file:	access:public
free_file	file.cpp	/^void free_file(unsigned char *filebuf,uint32 filesize) {$/;"	f	signature:(unsigned char *filebuf,uint32 filesize)
free_file	file.h	/^void free_file(unsigned char *filebuf,uint32 filesize);$/;"	p	signature:(unsigned char *filebuf,uint32 filesize)
free_ufile	download.cpp	/^void free_ufile(Ufile ufile) {$/;"	f	signature:(Ufile ufile)
free_ufile	download.h	/^void free_ufile(Ufile);$/;"	p
func	fastboot/engine.c	/^    int (*func)(Action *a, int status, char *resp);$/;"	m	struct:Action	file:	access:public
g_Receive_Buffer	serialif.cpp	/^unsigned char g_Receive_Buffer[MAX_RECEIVE_BUFFER_SIZE];$/;"	v
g_Receive_Bytes	serialif.cpp	/^int g_Receive_Bytes;$/;"	v
g_Transmit_Buffer	serialif.cpp	/^unsigned char g_Transmit_Buffer[MAX_SEND_BUFFER_SIZE];$/;"	v
g_Transmit_Length	serialif.cpp	/^int g_Transmit_Length;$/;"	v
g_cumulation_files_size	os_linux.cpp	/^unsigned long g_cumulation_files_size = -1;$/;"	v
g_default_port	os_linux.cpp	/^int g_default_port = 0;$/;"	v
g_hCom	serialif.cpp	/^int g_hCom;$/;"	v
g_log_file	atchannel.cpp	/^FILE *g_log_file = NULL;$/;"	v
g_total_files_size	os_linux.cpp	/^unsigned long g_total_files_size = -1;$/;"	v
getInstance	quectel_common.cpp	/^transfer_statistics* transfer_statistics::getInstance() {$/;"	f	class:transfer_statistics	signature:()
getOperator	ril-daemon.c	/^static int getOperator(void) {$/;"	f	file:	signature:(void)
getOperator	ril-daemon.cpp	/^static int getOperator(void) {$/;"	f	file:	signature:(void)
getRadioState	ril-daemon.c	/^static int getRadioState(void) {$/;"	f	file:	signature:(void)
getRadioState	ril-daemon.cpp	/^static int getRadioState(void) {$/;"	f	file:	signature:(void)
getRegistrationState	ril-daemon.c	/^static int getRegistrationState(void) {$/;"	f	file:	signature:(void)
getRegistrationState	ril-daemon.cpp	/^static int getRegistrationState(void) {$/;"	f	file:	signature:(void)
getRemoteIP	ril-daemon.c	/^static int getRemoteIP(char address[]) {$/;"	f	file:	signature:(char address[])
getRemoteIP	ril-daemon.cpp	/^static int getRemoteIP(char address[]) {$/;"	f	file:	signature:(char address[])
getSignalStrength	ril-daemon.c	/^static int getSignalStrength(void) {$/;"	f	file:	signature:(void)
getSignalStrength	ril-daemon.cpp	/^static int getSignalStrength(void) {$/;"	f	file:	signature:(void)
get_duration	firehose/qfirehose.c	/^void get_duration(double start) {$/;"	f	signature:(double start)
get_duration	firehose/usb_linux.h	/^void get_duration(double start);$/;"	p	signature:(double start)
get_duration	os_linux.cpp	/^void get_duration(double start) {$/;"	f	signature:(double start)
get_file_size	firehose/qfirehose.c	/^unsigned long get_file_size(const char* filename) {$/;"	f	signature:(const char* filename)
get_file_size	quectel_common.cpp	/^unsigned long get_file_size(const char* filename) {$/;"	f	signature:(const char* filename)
get_file_size	quectel_common.h	/^unsigned long get_file_size(const char* filename);$/;"	p	signature:(const char* filename)
get_module_platform	quectel_common.cpp	/^module_platform_t get_module_platform(const char* nprg_filename) {$/;"	f	signature:(const char* nprg_filename)
get_module_platform	quectel_common.h	/^module_platform_t get_module_platform(const char* nprg_filename);$/;"	p	signature:(const char* nprg_filename)
get_my_path	fastboot/fastboot.c	/^void get_my_path(char *path);$/;"	p	file:	signature:(char *path)
get_my_path	fastboot/util_linux.c	/^void get_my_path(char *path) {$/;"	f	signature:(char *path)
get_now	firehose/qfirehose.c	/^double get_now() {$/;"	f
get_now	firehose/usb_linux.h	/^double get_now();$/;"	p
get_now	quectel_common.cpp	/^double get_now() {$/;"	f	signature:()
get_now	quectel_common.h	/^double get_now();$/;"	p
get_percent	quectel_common.cpp	/^int transfer_statistics::get_percent() {$/;"	f	class:transfer_statistics	signature:()
get_product_model	quectel_common.cpp	/^int get_product_model(char ** product_model) {$/;"	f	signature:(char ** product_model)
get_product_model	quectel_common.h	/^int get_product_model(char ** product_model);$/;"	p	signature:(char ** product_model)
get_sahara_hello_packet	serialif.cpp	/^int get_sahara_hello_packet() {$/;"	f	signature:()
get_sahara_hello_packet	serialif.h	/^int get_sahara_hello_packet();$/;"	p
get_single_file_size	file.cpp	/^unsigned long get_single_file_size(const char *fileName) {$/;"	f	signature:(const char *fileName)
get_time	fastboot/quectel_log.c	/^const char * get_time(void) {$/;"	f	signature:(void)
get_time	fastboot/quectel_log.h	/^const char * get_time(void);$/;"	p	signature:(void)
get_time	quectel_log.cpp	/^const char * get_time(void) {$/;"	f	signature:(void)
get_time	quectel_log.h	/^const char * get_time(void);$/;"	p	signature:(void)
get_total_files_size	file.cpp	/^unsigned long get_total_files_size(download_context *ctx) {$/;"	f	signature:(download_context *ctx)
get_total_ram	fastboot/fastboot.c	/^static int get_total_ram() {$/;"	f	file:
gpid	os_linux.cpp	/^const char *gpid = NULL;$/;"	v
gvid	os_linux.cpp	/^const char *gvid = NULL;$/;"	v
handleFinalResponse	atchannel.cpp	/^static void handleFinalResponse(const char *line) {$/;"	f	file:	signature:(const char *line)
handleUnsolicited	atchannel.cpp	/^static void handleUnsolicited(const char *line) {$/;"	f	file:	signature:(const char *line)
handle_close	serialif.cpp	/^int handle_close(void) {$/;"	f	signature:(void)
handle_close	serialif.h	/^int handle_close(void);$/;"	p	signature:(void)
handle_hello	serialif.cpp	/^int handle_hello(void) {$/;"	f	signature:(void)
handle_hello	serialif.h	/^int handle_hello(void);$/;"	p	signature:(void)
handle_openmulti	serialif.cpp	/^int handle_openmulti(uint32 size,unsigned char* data) {$/;"	f	signature:(uint32 size,unsigned char* data)
handle_openmulti	serialif.h	/^int handle_openmulti(uint32 size,unsigned char* data);$/;"	p	signature:(uint32 size,unsigned char* data)
handle_parti_tbl	serialif.cpp	/^int handle_parti_tbl(unsigned char override) {$/;"	f	signature:(unsigned char override)
handle_parti_tbl	serialif.h	/^int handle_parti_tbl(unsigned char override);$/;"	p	signature:(unsigned char override)
handle_quectel_download_flag	serialif.cpp	/^int handle_quectel_download_flag(byte mode) {$/;"	f	signature:(byte mode)
handle_quectel_download_flag	serialif.h	/^int handle_quectel_download_flag(byte mode);$/;"	p	signature:(byte mode)
handle_reset	serialif.cpp	/^int handle_reset(void) {$/;"	f	signature:(void)
handle_reset	serialif.h	/^int handle_reset(void);$/;"	p	signature:(void)
handle_sahara_protocol	serialif.cpp	/^static void handle_sahara_protocol(unsigned char *rx_buff, target_current_state* state_) {$/;"	f	file:	signature:(unsigned char *rx_buff, target_current_state* state_)
handle_security_mode	serialif.cpp	/^int handle_security_mode(unsigned char trusted) {$/;"	f	signature:(unsigned char trusted)
handle_security_mode	serialif.h	/^int handle_security_mode(unsigned char trusted);$/;"	p	signature:(unsigned char trusted)
handle_write	serialif.cpp	/^int handle_write(FILE *fp,  unsigned char *data, uint32 size) {$/;"	f	signature:(FILE *fp, unsigned char *data, uint32 size)
handle_write	serialif.h	/^int handle_write(FILE *fp,  unsigned char *data, uint32 size);$/;"	p	signature:(FILE *fp, unsigned char *data, uint32 size)
has_bulk_in	fastboot/usb.h	/^    unsigned char has_bulk_in;$/;"	m	struct:usb_ifc_info	access:public
has_bulk_out	fastboot/usb.h	/^    unsigned char has_bulk_out;$/;"	m	struct:usb_ifc_info	access:public
header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon16	access:public
header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon17	access:public
header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon18	access:public
header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon19	access:public
header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon20	access:public
header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon21	access:public
header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon22	access:public
header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon23	access:public
header	firehose/sahara_protocol.h	/^    sahara_packet_header header;$/;"	m	struct:__anon24	access:public
hello_packet	serialif.h	/^} __attribute__((packed))hello_packet;$/;"	t	typeref:struct:__anon27
hi	md5.h	/^    uint32_t lo, hi;$/;"	m	struct:md5_ctx	access:public
idProduct	download.cpp	/^    __le16 idProduct;$/;"	m	struct:ql_usb_device	file:	access:public
idProduct	firehose/usb2tcp.c	/^    int idProduct;$/;"	m	struct:quectel_usb_device	file:	access:public
idProduct	firehose/usb_linux.c	/^    int idProduct;$/;"	m	struct:quectel_usb_device	file:	access:public
idProduct	firehose/usb_linux_firehose.c	/^    __le16 idProduct;$/;"	m	struct:ec20_usb_device	file:	access:public
idVendor	download.cpp	/^    __le16 idVendor;$/;"	m	struct:ql_usb_device	file:	access:public
idVendor	firehose/usb2tcp.c	/^    int idVendor;$/;"	m	struct:quectel_usb_device	file:	access:public
idVendor	firehose/usb_linux.c	/^    int idVendor;$/;"	m	struct:quectel_usb_device	file:	access:public
idVendor	firehose/usb_linux_firehose.c	/^    __le16 idVendor;$/;"	m	struct:ec20_usb_device	file:	access:public
ifc_class	fastboot/usb.h	/^    unsigned char ifc_class;$/;"	m	struct:usb_ifc_info	access:public
ifc_match_func	fastboot/usb.h	/^typedef int (*ifc_match_func)(usb_ifc_info *ifc);$/;"	t
ifc_protocol	fastboot/usb.h	/^    unsigned char ifc_protocol;$/;"	m	struct:usb_ifc_info	access:public
ifc_subclass	fastboot/usb.h	/^    unsigned char ifc_subclass;$/;"	m	struct:usb_ifc_info	access:public
ignore_dirty_data	serialif.cpp	/^int ignore_dirty_data() {$/;"	f	signature:()
ignore_dirty_data	serialif.h	/^int ignore_dirty_data();$/;"	p
ignore_sahara_stage_files	download.cpp	/^static void ignore_sahara_stage_files(download_context *pQdlContext) {$/;"	f	file:	signature:(download_context *pQdlContext)
image_close	file.cpp	/^int image_close(download_context *ctx) {$/;"	f	signature:(download_context *ctx)
image_close	file.h	/^extern int image_close(download_context *ctx);$/;"	p	signature:(download_context *ctx)
image_id	firehose/sahara_protocol.h	/^    uint32_t image_id;                \/\/ ID of image to be transferred$/;"	m	struct:__anon18	access:public
image_id	firehose/sahara_protocol.h	/^    uint32_t image_id;                \/\/ ID of image to be transferred$/;"	m	struct:__anon20	access:public
image_id	firehose/sahara_protocol.h	/^    uint64_t image_id;                \/\/ ID of image to be transferred$/;"	m	struct:__anon19	access:public
image_read	file.cpp	/^int image_read(download_context *ctx) {$/;"	f	signature:(download_context *ctx)
image_read	file.h	/^extern int image_read(download_context *ctx);$/;"	p	signature:(download_context *ctx)
image_tx_status	firehose/sahara_protocol.h	/^    uint32_t image_tx_status;         \/\/ indicates if all images have been$/;"	m	struct:__anon22	access:public
img_name	download.h	/^    char* img_name;$/;"	m	struct:__anon4	access:public
inet_addr	firehose/usb_linux.c	/^extern uint32_t      inet_addr(const char *);$/;"	p	file:	signature:(const char *)
inet_addr	firehose/usb_linux_firehose.c	/^unsigned int inet_addr(const char *cp);$/;"	p	file:	signature:(const char *cp)
instance	quectel_common.cpp	/^transfer_statistics* transfer_statistics::instance = 0;$/;"	m	class:transfer_statistics	file:
intr_ep	download.cpp	/^    __u8 intr_ep[QL_MAX_INF];$/;"	m	struct:ql_usb_device	file:	access:public
intr_ep	firehose/usb2tcp.c	/^    uint8_t intr_ep[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
intr_ep	firehose/usb_linux.c	/^    uint8_t intr_ep[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
intr_ep	firehose/usb_linux_firehose.c	/^    __u8 intr_ep[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	file:	access:public
isFinalResponseError	atchannel.cpp	/^static int isFinalResponseError(const char *line) {$/;"	f	file:	signature:(const char *line)
isFinalResponseSuccess	atchannel.cpp	/^static int isFinalResponseSuccess(const char *line) {$/;"	f	file:	signature:(const char *line)
isSMSUnsolicited	atchannel.cpp	/^static int isSMSUnsolicited(const char *line) {$/;"	f	file:	signature:(const char *line)
is_arg_valid	check_env.cpp	/^bool is_arg_valid(const char *arg)$/;"	f	signature:(const char *arg)
is_emergency_diag_port	quectel_common.cpp	/^int is_emergency_diag_port() {$/;"	f	signature:()
is_emergency_diag_port	quectel_common.h	/^int is_emergency_diag_port();$/;"	p
is_module_installed	check_env.cpp	/^bool is_module_installed(const char *modname)$/;"	f	signature:(const char *modname)
is_prog_installed	check_env.cpp	/^bool is_prog_installed(const char *progname)$/;"	f	signature:(const char *progname)
kick_sahara_state_machine	serialif.cpp	/^int kick_sahara_state_machine() {$/;"	f	signature:()
kick_sahara_state_machine	serialif.h	/^int kick_sahara_state_machine();$/;"	p
label	firehose/firehose_protocol.c	/^    char label[32];$/;"	m	struct:fh_erase_cmd	file:	access:public
label	firehose/firehose_protocol.c	/^    char label[32];$/;"	m	struct:fh_program_cmd	file:	access:public
last_sector	firehose/firehose_protocol.c	/^    uint32_t last_sector;$/;"	m	struct:fh_erase_cmd	file:	access:public
last_sector	firehose/firehose_protocol.c	/^    uint32_t last_sector;$/;"	m	struct:fh_program_cmd	file:	access:public
le16_to_cpu	fastboot/usb_linux_fastboot.c	/^U16 le16_to_cpu ( U16 v16) {$/;"	f	signature:( U16 v16)
le_uint32	firehose/sahara_protocol.c	/^static uint32_t le_uint32(uint32_t v32) {$/;"	f	file:	signature:(uint32_t v32)
length	firehose/sahara_protocol.h	/^    uint32_t length;                  \/\/ packet length incl command and length$/;"	m	struct:__anon15	access:public
line	atchannel.h	/^    char *line;$/;"	m	struct:ATLine	access:public
line	quectel_log.cpp	/^static char line[1024];$/;"	v	file:
list_devices	fastboot/fastboot.c	/^void list_devices(void) {$/;"	f	signature:(void)
list_devices_callback	fastboot/fastboot.c	/^int list_devices_callback(usb_ifc_info *info) {$/;"	f	signature:(usb_ifc_info *info)
lo	md5.h	/^    uint32_t lo, hi;$/;"	m	struct:md5_ctx	access:public
load_file	fastboot/fastboot.c	/^void *load_file(const char *fn, unsigned *_sz, int *out_fd) {$/;"	f	signature:(const char *fn, unsigned *_sz, int *out_fd)
load_file	fastboot/fastboot.c	/^void *load_file(const char *fn, unsigned *_sz, int *out_fd);$/;"	p	file:	signature:(const char *fn, unsigned *_sz, int *out_fd)
lockfile	quectel_common.cpp	/^static int lockfile(int fd) {$/;"	f	file:	signature:(int fd)
log	firehose/firehose_protocol.c	/^        struct fh_log_cmd log;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_log_cmd	file:	access:public
log_debug	fastboot/quectel_log.h	11;"	d
log_debug	fastboot/quectel_log.h	8;"	d
log_debug	quectel_log.h	10;"	d
log_debug	quectel_log.h	13;"	d
log_error	fastboot/quectel_log.h	14;"	d
log_error	quectel_log.h	16;"	d
log_fatal	fastboot/quectel_log.h	15;"	d
log_fatal	quectel_log.h	17;"	d
log_info	fastboot/quectel_log.h	16;"	d
log_info	platform_def.h	/^void log_info (const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
log_info	quectel_log.h	18;"	d
log_print	fastboot/quectel_log.h	10;"	d
log_print	fastboot/quectel_log.h	7;"	d
log_print	quectel_log.h	12;"	d
log_print	quectel_log.h	9;"	d
log_trace	os_linux.cpp	/^static char log_trace[MAX_TRACE_LENGTH];$/;"	v	file:
log_warn	fastboot/quectel_log.h	13;"	d
log_warn	quectel_log.h	15;"	d
logd	atchannel.cpp	/^int logd(const char *fmt, ...) {$/;"	f	signature:(const char *fmt, ...)
logd	atchannel.h	/^int logd(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
lookup_item	file.cpp	/^static int lookup_item(std::vector<md5_item>& md5_vec, char *filename, const char* md5) {$/;"	f	file:	signature:(std::vector<md5_item>& md5_vec, char *filename, const char* md5)
main	firehose/usb2tcp.c	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	os_linux.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
makedev	fastboot/usb_linux_fastboot.c	67;"	d	file:
match	fastboot/engine.c	/^static int match(char *str, const char **value, unsigned count) {$/;"	f	file:	signature:(char *str, const char **value, unsigned count)
match_fastboot	fastboot/fastboot.c	/^int match_fastboot(usb_ifc_info *info) {$/;"	f	signature:(usb_ifc_info *info)
match_fastboot_with_serial	fastboot/fastboot.c	/^int match_fastboot_with_serial(usb_ifc_info *info, const char *local_serial) {$/;"	f	signature:(usb_ifc_info *info, const char *local_serial)
md5_begin	md5.cpp	/^void md5_begin(md5_ctx_t *ctx) {$/;"	f	signature:(md5_ctx_t *ctx)
md5_begin	md5.h	/^extern void md5_begin(md5_ctx_t *ctx);$/;"	p	signature:(md5_ctx_t *ctx)
md5_check_enable	download.h	/^    int md5_check_enable;$/;"	m	struct:__anon7	access:public
md5_ctx	md5.h	/^typedef struct md5_ctx {$/;"	s
md5_ctx::a	md5.h	/^    uint32_t a, b, c, d;$/;"	m	struct:md5_ctx	access:public
md5_ctx::b	md5.h	/^    uint32_t a, b, c, d;$/;"	m	struct:md5_ctx	access:public
md5_ctx::buffer	md5.h	/^    unsigned char buffer[64];$/;"	m	struct:md5_ctx	access:public
md5_ctx::c	md5.h	/^    uint32_t a, b, c, d;$/;"	m	struct:md5_ctx	access:public
md5_ctx::d	md5.h	/^    uint32_t a, b, c, d;$/;"	m	struct:md5_ctx	access:public
md5_ctx::hi	md5.h	/^    uint32_t lo, hi;$/;"	m	struct:md5_ctx	access:public
md5_ctx::lo	md5.h	/^    uint32_t lo, hi;$/;"	m	struct:md5_ctx	access:public
md5_ctx_t	md5.h	/^} md5_ctx_t;$/;"	t	typeref:struct:md5_ctx
md5_end	md5.cpp	/^void md5_end(void *resbuf, md5_ctx_t *ctx) {$/;"	f	signature:(void *resbuf, md5_ctx_t *ctx)
md5_end	md5.h	/^extern void md5_end(void *resbuf, md5_ctx_t *ctx);$/;"	p	signature:(void *resbuf, md5_ctx_t *ctx)
md5_hash	md5.cpp	/^void md5_hash(const void *data, size_t size, md5_ctx_t *ctx) {$/;"	f	signature:(const void *data, size_t size, md5_ctx_t *ctx)
md5_hash	md5.h	/^extern void md5_hash(const void *data, size_t length, md5_ctx_t *ctx);$/;"	p	signature:(const void *data, size_t length, md5_ctx_t *ctx)
md5_item	file.cpp	/^} md5_item;$/;"	t	typeref:struct:_md5_item	file:
md5_value	file.cpp	/^    std::string md5_value;$/;"	m	struct:_md5_item	file:	access:public
md5_vec	file.cpp	/^static std::vector<md5_item> md5_vec;	\/\/parse the md5.txt and save [filename:md5]$/;"	v	file:
md5sum	md5.cpp	/^int md5sum(char *file, void *md5_buf) {$/;"	f	signature:(char *file, void *md5_buf)
md5sum	md5.h	/^int md5sum(char *file, void *md5_buf);$/;"	p	signature:(char *file, void *md5_buf)
mkmsg	fastboot/engine.c	/^char *mkmsg(const char *fmt, ...) {$/;"	f	signature:(const char *fmt, ...)
mobile_modle_number	serialif.h	/^    unsigned char mobile_modle_number[4];$/;"	m	struct:__anon25	access:public
mobile_software_revision	serialif.h	/^    unsigned char mobile_software_revision[1];$/;"	m	struct:__anon25	access:public
mode	firehose/sahara_protocol.h	/^    uint32_t mode;                    \/\/ expected mode of target operation$/;"	m	struct:__anon16	access:public
mode	firehose/sahara_protocol.h	/^    uint32_t mode;                    \/\/ mode of operation for target to execute$/;"	m	struct:__anon17	access:public
modem_port	download.h	/^    char *modem_port;				\/\/modem port name$/;"	m	struct:__anon7	access:public
modprobe_qcserial	download.cpp	/^static void modprobe_qcserial() {$/;"	f	file:	signature:()
module_platform_t	quectel_common.h	/^enum module_platform_t {$/;"	g
module_state	download.cpp	/^int module_state(download_context *pQdlContext) {$/;"	f	signature:(download_context *pQdlContext)
msg	fastboot/engine.c	/^    const char *msg;$/;"	m	struct:Action	file:	access:public
msic_bytes	download.cpp	/^unsigned char msic_bytes[MISC_PARTITION_LENGTH] = {0};$/;"	v
msm	serialif.h	/^    unsigned char msm[4];$/;"	m	struct:__anon25	access:public
name	download.h	/^    char* name;$/;"	m	struct:__anon4	access:public
next	fastboot/engine.c	/^    Action *next;$/;"	m	struct:Action	file:	access:public
nextTok	at_tok.c	/^static char * nextTok(char **p_cur) {$/;"	f	file:	signature:(char **p_cur)
nextTok	at_tok.cpp	/^static char * nextTok(char **p_cur) {$/;"	f	file:	signature:(char **p_cur)
noblock_full_read	firehose/usb2tcp.c	/^static int noblock_full_read(int fd, void *pbuf, ssize_t size) {$/;"	f	file:	signature:(int fd, void *pbuf, ssize_t size)
noblock_full_write	firehose/usb2tcp.c	/^static ssize_t noblock_full_write(int fd, const void *pbuf, ssize_t size) {$/;"	f	file:	signature:(int fd, const void *pbuf, ssize_t size)
normal_reset	serialif.cpp	/^int normal_reset(void) {$/;"	f	signature:(void)
not_support_at_fastboot	download.cpp	/^static const char* not_support_at_fastboot =$/;"	v	file:
now	fastboot/engine.c	/^double now() {$/;"	f
npos	tinystr.cpp	/^const TiXmlString::size_type TiXmlString::npos = static_cast< TiXmlString::size_type >(-1);$/;"	m	class:TiXmlString	file:
nullrep_	tinystr.cpp	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:TiXmlString	file:
num_partition_sectors	firehose/firehose_protocol.c	/^    uint32_t num_partition_sectors;$/;"	m	struct:fh_erase_cmd	file:	access:public
num_partition_sectors	firehose/firehose_protocol.c	/^    uint32_t num_partition_sectors;$/;"	m	struct:fh_program_cmd	file:	access:public
onATReaderClosed	ril-daemon.c	/^static void onATReaderClosed() {$/;"	f	file:
onATReaderClosed	ril-daemon.cpp	/^static void onATReaderClosed() {$/;"	f	file:	signature:()
onATTimeout	ril-daemon.c	/^static void onATTimeout() {$/;"	f	file:
onATTimeout	ril-daemon.cpp	/^static void onATTimeout() {$/;"	f	file:	signature:()
onReaderClosed	atchannel.cpp	/^static void onReaderClosed() {$/;"	f	file:	signature:()
onReaderClosed	atchannel.cpp	/^static void onReaderClosed();$/;"	p	file:	signature:()
onUnsolicited	ril-daemon.c	/^static void onUnsolicited (const char *s, const char *sms_pdu) {$/;"	f	file:	signature:(const char *s, const char *sms_pdu)
onUnsolicited	ril-daemon.cpp	/^static void onUnsolicited (const char *s, const char *sms_pdu) {$/;"	f	file:	signature:(const char *s, const char *sms_pdu)
op	fastboot/engine.c	/^    unsigned op;$/;"	m	struct:Action	file:	access:public
open_device	fastboot/fastboot.c	/^usb_handle *open_device(void) {$/;"	f	signature:(void)
open_file	file.cpp	/^unsigned char * open_file(const char *filepath, uint32 *filesize) {$/;"	f	signature:(const char *filepath, uint32 *filesize)
open_file	file.h	/^unsigned char * open_file(const char *filepath,uint32 *filesize);$/;"	p	signature:(const char *filepath,uint32 *filesize)
open_port_once	quectel_common.cpp	/^int open_port_once(int ioflush) {$/;"	f	signature:(int ioflush)
open_port_once	quectel_common.h	/^int open_port_once(const char* dev);$/;"	p	signature:(const char* dev)
open_port_once	quectel_common.h	/^int open_port_once(int ioflush);$/;"	p	signature:(int ioflush)
openport	os_linux.cpp	/^int openport(int ioflush) {$/;"	f	signature:(int ioflush)
openport	os_linux.h	/^int openport(int ioflush);$/;"	p	signature:(int ioflush)
operator	tinystr.h	/^TiXmlString operator + (const TiXmlString & a, const char* b);$/;"	p	signature:(const TiXmlString & a, const char* b)
operator	tinystr.h	/^TiXmlString operator + (const char* a, const TiXmlString & b);$/;"	p	signature:(const char* a, const TiXmlString & b)
operator	tinystr.h	/^inline bool operator != (const TiXmlString & a, const TiXmlString & b) {$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator	tinystr.h	/^inline bool operator < (const TiXmlString & a, const TiXmlString & b) {$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator	tinystr.h	/^inline bool operator <= (const TiXmlString & a, const TiXmlString & b) {$/;"	v
operator	tinystr.h	/^inline bool operator == (const TiXmlString & a, const TiXmlString & b) {$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator	tinystr.h	/^inline bool operator >  (const TiXmlString & a, const TiXmlString & b) {$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator +	tinystr.cpp	/^TiXmlString operator + (const TiXmlString & a, const TiXmlString & b) {$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator +	tinystr.cpp	/^TiXmlString operator + (const TiXmlString & a, const char* b) {$/;"	f	signature:(const TiXmlString & a, const char* b)
operator +	tinystr.cpp	/^TiXmlString operator + (const char* a, const TiXmlString & b) {$/;"	f	signature:(const char* a, const TiXmlString & b)
operator <<	tinyxml.cpp	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base) {$/;"	f	signature:(std::ostream & out, const TiXmlNode & base)
operator <<	tinyxml.cpp	/^std::string& operator<< (std::string& out, const TiXmlNode& base ) {$/;"	f	signature:(std::string& out, const TiXmlNode& base )
operator =	quectel_common.cpp	/^transfer_statistics& transfer_statistics::operator=(const transfer_statistics&) {$/;"	f	class:transfer_statistics	signature:(const transfer_statistics&)
operator =	tinyxml.cpp	/^TiXmlComment& TiXmlComment::operator=( const TiXmlComment& base ) {$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& base )
operator =	tinyxml.cpp	/^TiXmlDeclaration& TiXmlDeclaration::operator=( const TiXmlDeclaration& copy ) {$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
operator =	tinyxml.cpp	/^TiXmlDocument& TiXmlDocument::operator=( const TiXmlDocument& copy ) {$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
operator =	tinyxml.cpp	/^TiXmlElement& TiXmlElement::operator=( const TiXmlElement& base ) {$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& base )
operator >>	tinyxml.cpp	/^std::istream& operator>> (std::istream & in, TiXmlNode & base) {$/;"	f	signature:(std::istream & in, TiXmlNode & base)
os_ready	os_linux.cpp	/^static int os_ready(download_context *ctx_ptr) {$/;"	f	file:	signature:(download_context *ctx_ptr)
p_download_context	download.h	/^} download_context, *p_download_context;$/;"	t	typeref:struct:__anon7
p_intermediates	atchannel.h	/^    ATLine  *p_intermediates; \/* any intermediate responses *\/$/;"	m	struct:__anon2	access:public
p_next	atchannel.h	/^    struct ATLine *p_next;$/;"	m	struct:ATLine	typeref:struct:ATLine::ATLine	access:public
parse_line	file.cpp	/^static int parse_line(const std::string& line, std::string &filename, std::string & md5) {$/;"	f	file:	signature:(const std::string& line, std::string &filename, std::string & md5)
parse_md5_file	file.cpp	/^static int parse_md5_file(const char* filename, std::vector<md5_item>& vec) {$/;"	f	file:	signature:(const char* filename, std::vector<md5_item>& vec)
partition_complete_mbn	download.h	/^    char *partition_complete_mbn;$/;"	m	struct:__anon7	access:public
partition_name	download.h	/^    char* partition_name;$/;"	m	struct:__anon4	access:public
partition_path	download.h	/^    char *partition_path;$/;"	m	struct:__anon7	access:public
patch_xml	download.h	/^    char *patch_xml;$/;"	m	struct:__anon7	access:public
physical_partition_number	firehose/firehose_protocol.c	/^    uint32_t physical_partition_number;$/;"	m	struct:fh_erase_cmd	file:	access:public
physical_partition_number	firehose/firehose_protocol.c	/^    uint32_t physical_partition_number;$/;"	m	struct:fh_program_cmd	file:	access:public
pkt_open_multi_image	serialif.cpp	/^void pkt_open_multi_image (unsigned char mode, unsigned char *data, uint32 size) {$/;"	f	signature:(unsigned char mode, unsigned char *data, uint32 size)
pkt_write_multi_image	serialif.cpp	/^void pkt_write_multi_image(uint32 addr, unsigned char*data, uint16 size) {$/;"	f	signature:(uint32 addr, unsigned char*data, uint16 size)
platform	download.h	/^    module_platform_t	platform;$/;"	m	struct:__anon7	access:public
platform_9x06	quectel_common.h	/^    platform_9x06 = 0,$/;"	e	enum:module_platform_t
platform_9x07	quectel_common.h	/^    platform_9x07,$/;"	e	enum:module_platform_t
platform_9x45	quectel_common.h	/^    platform_9x45,$/;"	e	enum:module_platform_t
platform_9x65	quectel_common.h	/^    platform_9x65,$/;"	e	enum:module_platform_t
platform_unknown	quectel_common.h	/^    platform_unknown$/;"	e	enum:module_platform_t
platfrom2str	os_linux.cpp	/^static const char* platfrom2str(module_platform_t t) {$/;"	f	file:	signature:(module_platform_t t)
poll_wait	firehose/usb_linux.c	/^static int poll_wait(int poll_fd, short events, int timeout_msec) {$/;"	f	file:	signature:(int poll_fd, short events, int timeout_msec)
probe_quectel_speed	quectel_common.cpp	/^int probe_quectel_speed(enum usb_speed* speed) {$/;"	f	signature:(enum usb_speed* speed)
probe_quectel_speed	quectel_common.h	/^int probe_quectel_speed(enum usb_speed* speed);$/;"	p	signature:(enum usb_speed* speed)
processLine	atchannel.cpp	/^static void processLine(const char *line) {$/;"	f	file:	signature:(const char *line)
process_at_fastboot_upgrade	download.cpp	/^int process_at_fastboot_upgrade(download_context* ctx_ptr) {$/;"	f	signature:(download_context* ctx_ptr)
process_at_fastboot_upgrade	download.h	/^int process_at_fastboot_upgrade(download_context* );$/;"	p	signature:(download_context* )
process_cb	download.h	/^    process_fun_t	process_cb;$/;"	m	struct:__anon7	access:public
process_firehose_upgrade	download.cpp	/^int process_firehose_upgrade(download_context* ctx_ptr) {$/;"	f	signature:(download_context* ctx_ptr)
process_firehose_upgrade	download.h	/^int process_firehose_upgrade(download_context* ctx_ptr);$/;"	p	signature:(download_context* ctx_ptr)
process_fun_t	download.h	/^typedef void (*process_fun_t)(int writesize,int size,int clear);$/;"	t
process_streaming_fastboot_upgarde	download.cpp	/^int process_streaming_fastboot_upgarde(download_context *ctx_ptr) {$/;"	f	signature:(download_context *ctx_ptr)
process_streaming_fastboot_upgarde	download.h	/^int process_streaming_fastboot_upgarde(download_context* );$/;"	p	signature:(download_context* )
prod	fastboot/engine.c	/^    const char *prod;$/;"	m	struct:Action	file:	access:public
prodct_model	download.h	/^    char* prodct_model;$/;"	m	struct:__anon7	access:public
product	fastboot/fastboot.c	/^static const char *product = 0;$/;"	v	file:
prog_log	os_linux.cpp	/^void prog_log(int writesize,int size,int clear) {$/;"	f	signature:(int writesize,int size,int clear)
prog_nand_firehose_mbn	download.h	/^    char *prog_nand_firehose_mbn;$/;"	m	struct:__anon7	access:public
program	firehose/firehose_protocol.c	/^        struct fh_program_cmd program;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_program_cmd	file:	access:public
program_name	firehose/qfirehose.c	/^const char* program_name = NULL;$/;"	v
q_port_detect	quectel_common.h	/^int q_port_detect(char** pp_diag_port, int interface);$/;"	p	signature:(char** pp_diag_port, int interface)
qdl_flush_fifo	os_linux.cpp	/^void qdl_flush_fifo(int fd, int tx_flush, int rx_flush,int rx_tcp_flag) {$/;"	f	signature:(int fd, int tx_flush, int rx_flush,int rx_tcp_flag)
qdl_flush_fifo	os_linux.h	/^void qdl_flush_fifo(int fd, int tx_flush, int rx_flush,int rx_tcp_flag);$/;"	p	signature:(int fd, int tx_flush, int rx_flush,int rx_tcp_flag)
qdl_log_cb	download.h	/^typedef int  (*qdl_log_cb)(const char *msg,...);$/;"	t
qdl_msg_cb	download.h	/^typedef void (*qdl_msg_cb)(int msgtype,const char *msg1,const char * msg2);$/;"	t
qdl_msg_log	os_linux.cpp	/^void qdl_msg_log(int msgtype,char *msg1,char * msg2) {$/;"	f	signature:(int msgtype,char *msg1,char * msg2)
qdl_post_download	file.cpp	/^extern void qdl_post_download(void);$/;"	p	file:	signature:(void)
qdl_post_download	os_linux.cpp	/^void qdl_post_download(download_context *pQdlContext, int result) {$/;"	f	signature:(download_context *pQdlContext, int result)
qdl_post_download	os_linux.h	/^void qdl_post_download(download_context *pQdlContext, int result);$/;"	p	signature:(download_context *pQdlContext, int result)
qdl_pre_download	file.cpp	/^extern void qdl_pre_download(void);$/;"	p	file:	signature:(void)
qdl_pre_download	os_linux.cpp	/^int qdl_pre_download(download_context *ctx_ptr) {$/;"	f	signature:(download_context *ctx_ptr)
qdl_pre_download	os_linux.h	/^int qdl_pre_download(download_context *pQdlContext);$/;"	p	signature:(download_context *pQdlContext)
qdl_prog_cb	download.h	/^typedef void (*qdl_prog_cb)(int writesize,int size,int clear);$/;"	t
qdl_sleep	os_linux.cpp	/^void qdl_sleep(int millsec) {$/;"	f	signature:(int millsec)
qdl_sleep	os_linux.h	/^void qdl_sleep(int millsec);$/;"	p	signature:(int millsec)
qdl_start_download	os_linux.cpp	/^int qdl_start_download(download_context *pQdlContext) {$/;"	f	signature:(download_context *pQdlContext)
qdl_start_download	os_linux.h	/^int  qdl_start_download(download_context *pQdlContext);$/;"	p	signature:(download_context *pQdlContext)
qdl_text_cb	download.h	/^typedef void (*qdl_text_cb)(const char *msg,...);$/;"	t
qfile_find_xmlfile	firehose/usb_linux.c	/^int qfile_find_xmlfile(const char *dir, const char *prefix, char** xmlfile) {$/;"	f	signature:(const char *dir, const char *prefix, char** xmlfile)
qfile_find_xmlfile	firehose/usb_linux.h	/^int qfile_find_xmlfile(const char *dir, const char *prefix, char** xmlfile);$/;"	p	signature:(const char *dir, const char *prefix, char** xmlfile)
ql_device	download.cpp	/^static struct ql_usb_device ql_device;$/;"	v	typeref:struct:ql_usb_device	file:
ql_pclose	download.cpp	/^static int ql_pclose(FILE *iop) {$/;"	f	file:	signature:(FILE *iop)
ql_popen	download.cpp	/^static FILE * ql_popen(const char *program, const char *type) {$/;"	f	file:	signature:(const char *program, const char *type)
ql_usb_device	download.cpp	/^struct ql_usb_device {$/;"	s	file:
ql_usb_device::bNumInterfaces	download.cpp	/^    __u8 bNumInterfaces;$/;"	m	struct:ql_usb_device	file:	access:public
ql_usb_device::bulk_ep_in	download.cpp	/^    __u8 bulk_ep_in[QL_MAX_INF];$/;"	m	struct:ql_usb_device	file:	access:public
ql_usb_device::bulk_ep_out	download.cpp	/^    __u8 bulk_ep_out[QL_MAX_INF];$/;"	m	struct:ql_usb_device	file:	access:public
ql_usb_device::bulk_in	download.cpp	/^    struct usbdevfs_urb bulk_in[QL_MAX_INF];$/;"	m	struct:ql_usb_device	typeref:struct:ql_usb_device::usbdevfs_urb	file:	access:public
ql_usb_device::bulk_out	download.cpp	/^    struct usbdevfs_urb bulk_out[QL_MAX_INF];$/;"	m	struct:ql_usb_device	typeref:struct:ql_usb_device::usbdevfs_urb	file:	access:public
ql_usb_device::control	download.cpp	/^    int control[QL_MAX_INF][2];$/;"	m	struct:ql_usb_device	file:	access:public
ql_usb_device::desc	download.cpp	/^    int desc;$/;"	m	struct:ql_usb_device	file:	access:public
ql_usb_device::fname	download.cpp	/^    char fname[64];$/;"	m	struct:ql_usb_device	file:	access:public
ql_usb_device::idProduct	download.cpp	/^    __le16 idProduct;$/;"	m	struct:ql_usb_device	file:	access:public
ql_usb_device::idVendor	download.cpp	/^    __le16 idVendor;$/;"	m	struct:ql_usb_device	file:	access:public
ql_usb_device::intr_ep	download.cpp	/^    __u8 intr_ep[QL_MAX_INF];$/;"	m	struct:ql_usb_device	file:	access:public
ql_usb_device::wMaxPacketSize	download.cpp	/^    __le16 wMaxPacketSize[QL_MAX_INF];$/;"	m	struct:ql_usb_device	file:	access:public
qtcp_connect	firehose/usb_linux.c	/^static int qtcp_connect(const char *port_name, int *idVendor, int *idProduct, int *interfaceNum) {$/;"	f	file:	signature:(const char *port_name, int *idVendor, int *idProduct, int *interfaceNum)
qtcp_write	firehose/usb_linux.c	/^static int qtcp_write(int fd, void*pbuf, int size, int timeout_msec) {$/;"	f	file:	signature:(int fd, void*pbuf, int size, int timeout_msec)
quectel_9x07	firehose/usb2tcp.c	/^static struct quectel_usb_device quectel_9x07;$/;"	v	typeref:struct:quectel_usb_device	file:
quectel_9x07	firehose/usb_linux.c	/^static struct quectel_usb_device quectel_9x07;$/;"	v	typeref:struct:quectel_usb_device	file:
quectel_find_usb_device	download.cpp	/^static void quectel_find_usb_device(struct ql_usb_device *udev) {$/;"	f	file:	signature:(struct ql_usb_device *udev)
quectel_find_usb_device	firehose/usb2tcp.c	/^static void quectel_find_usb_device(struct quectel_usb_device *udev) {$/;"	f	file:	signature:(struct quectel_usb_device *udev)
quectel_find_usb_device	firehose/usb_linux.c	/^static void quectel_find_usb_device(struct quectel_usb_device *udev) {$/;"	f	file:	signature:(struct quectel_usb_device *udev)
quectel_find_usb_device	firehose/usb_linux_firehose.c	/^static void quectel_find_usb_device(struct ec20_usb_device *udev) {$/;"	f	file:	signature:(struct ec20_usb_device *udev)
quectel_usb_device	firehose/usb2tcp.c	/^struct quectel_usb_device {$/;"	s	file:
quectel_usb_device	firehose/usb_linux.c	/^struct quectel_usb_device {$/;"	s	file:
quectel_usb_device::bNumInterfaces	firehose/usb2tcp.c	/^    uint8_t bNumInterfaces;$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::bNumInterfaces	firehose/usb_linux.c	/^    uint8_t bNumInterfaces;$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::bulk_ep_in	firehose/usb2tcp.c	/^    uint8_t bulk_ep_in[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::bulk_ep_in	firehose/usb_linux.c	/^    uint8_t bulk_ep_in[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::bulk_ep_out	firehose/usb2tcp.c	/^    uint8_t bulk_ep_out[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::bulk_ep_out	firehose/usb_linux.c	/^    uint8_t bulk_ep_out[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::control	firehose/usb2tcp.c	/^    int control[EC20_MAX_INF][2];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::control	firehose/usb_linux.c	/^    int control[EC20_MAX_INF][2];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::desc	firehose/usb2tcp.c	/^    int desc;$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::desc	firehose/usb_linux.c	/^    int desc;$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::devname	firehose/usb2tcp.c	/^    char devname[64];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::devname	firehose/usb_linux.c	/^    char devname[64];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::idProduct	firehose/usb2tcp.c	/^    int idProduct;$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::idProduct	firehose/usb_linux.c	/^    int idProduct;$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::idVendor	firehose/usb2tcp.c	/^    int idVendor;$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::idVendor	firehose/usb_linux.c	/^    int idVendor;$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::intr_ep	firehose/usb2tcp.c	/^    uint8_t intr_ep[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::intr_ep	firehose/usb_linux.c	/^    uint8_t intr_ep[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::thread_id	firehose/usb2tcp.c	/^    pthread_t thread_id[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::ttyfd	firehose/usb2tcp.c	/^    int ttyfd;$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::ttyfd	firehose/usb_linux.c	/^    int ttyfd;$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::wMaxPacketSize	firehose/usb2tcp.c	/^    int wMaxPacketSize[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
quectel_usb_device::wMaxPacketSize	firehose/usb_linux.c	/^    int wMaxPacketSize[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
queue_action	fastboot/engine.c	/^static Action *queue_action(unsigned op, const char *fmt, ...) {$/;"	f	file:	signature:(unsigned op, const char *fmt, ...)
queue_info_dump	fastboot/fastboot.c	/^void queue_info_dump(void) {$/;"	f	signature:(void)
qusb_close	firehose/usb2tcp.c	/^static int qusb_close(int fd) {$/;"	f	file:	signature:(int fd)
qusb_close	firehose/usb_linux_firehose.c	/^int qusb_close(int fd) {$/;"	f	signature:(int fd)
qusb_find_ec20	firehose/usb_linux_firehose.c	/^int qusb_find_ec20(int *idVendor, int *idProduct, int *interfaceNum) {$/;"	f	signature:(int *idVendor, int *idProduct, int *interfaceNum)
qusb_find_emergency_port	download.cpp	/^static int qusb_find_emergency_port(int *idVendor, int *idProduct, int *interfaceNum) {$/;"	f	file:	signature:(int *idVendor, int *idProduct, int *interfaceNum)
qusb_find_quectel_9x07	firehose/usb2tcp.c	/^static int qusb_find_quectel_9x07(const char *port_name, int *idVendor, int *idProduct, int *interfaceNum) {$/;"	f	file:	signature:(const char *port_name, int *idVendor, int *idProduct, int *interfaceNum)
qusb_noblock_close	firehose/usb_linux.c	/^int qusb_noblock_close(void *handle) {$/;"	f	signature:(void *handle)
qusb_noblock_close	firehose/usb_linux.h	/^int qusb_noblock_close(void *handle);$/;"	p	signature:(void *handle)
qusb_noblock_open	firehose/usb_linux.c	/^void *qusb_noblock_open(const char *port_name, int *idVendor, int *idProduct, int *interfaceNum) {$/;"	f	signature:(const char *port_name, int *idVendor, int *idProduct, int *interfaceNum)
qusb_noblock_open	firehose/usb_linux.h	/^void * qusb_noblock_open(const char *port_name, int *idVendor, int *idProduct, int *interfaceNum);$/;"	p	signature:(const char *port_name, int *idVendor, int *idProduct, int *interfaceNum)
qusb_noblock_read	firehose/usb_linux.c	/^int qusb_noblock_read(const void *handle, void *pbuf, int max_size, int min_size, int timeout_msec) {$/;"	f	signature:(const void *handle, void *pbuf, int max_size, int min_size, int timeout_msec)
qusb_noblock_read	firehose/usb_linux.h	/^int qusb_noblock_read(const void *handle, void *pbuf, int max_size, int min_size, int timeout_msec);$/;"	p	signature:(const void *handle, void *pbuf, int max_size, int min_size, int timeout_msec)
qusb_noblock_write	firehose/usb_linux.c	/^int qusb_noblock_write(const void *handle, void *pbuf, int max_size, int min_size, int timeout_msec, int need_zlp) {$/;"	f	signature:(const void *handle, void *pbuf, int max_size, int min_size, int timeout_msec, int need_zlp)
qusb_noblock_write	firehose/usb_linux.h	/^int qusb_noblock_write(const void *handle, void *pbuf, int max_size, int min_size, int timeout_msec, int need_zlp);$/;"	p	signature:(const void *handle, void *pbuf, int max_size, int min_size, int timeout_msec, int need_zlp)
qusb_open	firehose/usb2tcp.c	/^static int qusb_open(const char *port_name) {$/;"	f	file:	signature:(const char *port_name)
qusb_open	firehose/usb_linux_firehose.c	/^int qusb_open(char *port_name) {$/;"	f	signature:(char *port_name)
qusb_read	firehose/usb2tcp.c	/^ssize_t qusb_read(int fd, void* pbuf, size_t size) {$/;"	f	signature:(int fd, void* pbuf, size_t size)
qusb_read	firehose/usb_linux_firehose.c	/^ssize_t qusb_read(int fd, void* pbuf, size_t size) {$/;"	f	signature:(int fd, void* pbuf, size_t size)
qusb_write	firehose/usb2tcp.c	/^static ssize_t qusb_write(int fd, const void*pbuf, size_t size, int need_zlp) {$/;"	f	file:	signature:(int fd, const void*pbuf, size_t size, int need_zlp)
qusb_write	firehose/usb_linux_firehose.c	/^ssize_t qusb_write(int fd, const void*pbuf, size_t size, int need_zlp) {$/;"	f	signature:(int fd, const void*pbuf, size_t size, int need_zlp)
qusb_zlp_mode	firehose/qfirehose.c	/^unsigned qusb_zlp_mode = 1; \/\/MT7621 donot support USB ZERO PACKET$/;"	v
rawmode	firehose/firehose_protocol.c	/^    uint32_t rawmode;$/;"	m	struct:fh_response_cmd	file:	access:public
rawprogram_nand_update_xml	download.h	/^    char *rawprogram_nand_update_xml;$/;"	m	struct:__anon7	access:public
read_data_packet_t	serialif.h	/^} __attribute__((packed))read_data_packet_t;$/;"	t	typeref:struct:__anon28
read_sysfs_number	fastboot/usb_linux_fastboot.c	/^static int read_sysfs_number(const char *sysfs_name, const char *sysfs_node) {$/;"	f	file:	signature:(const char *sysfs_name, const char *sysfs_node)
read_sysfs_string	fastboot/usb_linux_fastboot.c	/^static int read_sysfs_string(const char *sysfs_name, const char *sysfs_node,$/;"	f	file:	signature:(const char *sysfs_name, const char *sysfs_node, char* buf, int bufsize)
readerLoop	atchannel.cpp	/^static void *readerLoop(void *arg) {$/;"	f	file:	signature:(void *arg)
readline	atchannel.cpp	/^static const char *readline() {$/;"	f	file:	signature:()
receive_packet	serialif.cpp	/^int receive_packet(void) {$/;"	f	signature:(void)
remove_escape_hdlc_flag	serialif.cpp	/^static int remove_escape_hdlc_flag(unsigned char* buffer, int len) {$/;"	f	file:	signature:(unsigned char* buffer, int len)
require	fastboot/fastboot.c	381;"	d	file:
reserve	tinystr.cpp	/^void TiXmlString::reserve (size_type cap) {$/;"	f	class:TiXmlString	signature:(size_type cap)
reserved	serialif.h	/^    unsigned char reserved[2];$/;"	m	struct:__anon25	access:public
reserved0	firehose/sahara_protocol.h	/^    uint32_t reserved0;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
reserved0	firehose/sahara_protocol.h	/^    uint32_t reserved0;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
reserved1	firehose/sahara_protocol.h	/^    uint32_t reserved1;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
reserved1	firehose/sahara_protocol.h	/^    uint32_t reserved1;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
reserved2	firehose/sahara_protocol.h	/^    uint32_t reserved2;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
reserved2	firehose/sahara_protocol.h	/^    uint32_t reserved2;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
reserved3	firehose/sahara_protocol.h	/^    uint32_t reserved3;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
reserved3	firehose/sahara_protocol.h	/^    uint32_t reserved3;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
reserved4	firehose/sahara_protocol.h	/^    uint32_t reserved4;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
reserved4	firehose/sahara_protocol.h	/^    uint32_t reserved4;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
reserved5	firehose/sahara_protocol.h	/^    uint32_t reserved5;               \/\/ reserved field$/;"	m	struct:__anon16	access:public
reserved5	firehose/sahara_protocol.h	/^    uint32_t reserved5;               \/\/ reserved field$/;"	m	struct:__anon17	access:public
response	firehose/firehose_protocol.c	/^        struct fh_response_cmd response;$/;"	m	union:fh_cmd::__anon8	typeref:struct:fh_cmd::__anon8::fh_response_cmd	file:	access:public
ret_if_fail	quectel_common.h	12;"	d
ret_val_if_fail	quectel_common.h	11;"	d
retrieve_diag_port	os_linux.cpp	/^int retrieve_diag_port(download_context* ctx_ptr, int auto_detect);$/;"	p	file:	signature:(download_context* ctx_ptr, int auto_detect)
retrieve_filename	file.cpp	/^int retrieve_filename(download_context *ctx, char* path) {$/;"	f	signature:(download_context *ctx, char* path)
retrieve_md5_filename	file.cpp	/^static char* retrieve_md5_filename(const char* path) {$/;"	f	file:	signature:(const char* path)
retrieve_nrpg_enrpg_filename	file.cpp	/^int retrieve_nrpg_enrpg_filename(const char* path, char** nrpg_filename, char **enrpg_filename) {$/;"	f	signature:(const char* path, char** nrpg_filename, char **enrpg_filename)
retrieve_soft_revision	serialif.cpp	/^int retrieve_soft_revision() {$/;"	f	signature:()
retrieve_soft_revision	serialif.h	/^int retrieve_soft_revision();$/;"	p
reverseIntermediates	atchannel.cpp	/^static void reverseIntermediates(ATResponse *p_response) {$/;"	f	file:	signature:(ATResponse *p_response)
rmmod_qcserial	download.cpp	/^static void rmmod_qcserial() {$/;"	f	file:	signature:()
row	tinyxml.h	/^    int row;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
s_ATBuffer	atchannel.cpp	/^static char s_ATBuffer[MAX_AT_RESPONSE+1];$/;"	v	file:
s_ATBufferCur	atchannel.cpp	/^static char *s_ATBufferCur = s_ATBuffer;$/;"	v	file:
s_QdlContext	os_linux.cpp	/^static download_context s_QdlContext;$/;"	v	file:
s_closed	ril-daemon.c	/^static int s_closed = 0;$/;"	v	file:
s_closed	ril-daemon.cpp	/^static int s_closed = 0;$/;"	v	file:
s_commandcond	atchannel.cpp	/^static pthread_cond_t s_commandcond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
s_commandmutex	atchannel.cpp	/^static pthread_mutex_t s_commandmutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
s_fd	atchannel.cpp	/^static int s_fd = -1;    \/* fd of the AT channel *\/$/;"	v	file:
s_finalResponsesError	atchannel.cpp	/^static const char * s_finalResponsesError[] = {$/;"	v	file:
s_finalResponsesSuccess	atchannel.cpp	/^static const char * s_finalResponsesSuccess[] = {$/;"	v	file:
s_log_line	atchannel.cpp	/^static char s_log_line[4096];$/;"	v	file:
s_log_mutex	atchannel.cpp	/^static pthread_mutex_t s_log_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
s_onReaderClosed	atchannel.cpp	/^static void (*s_onReaderClosed)(void) = NULL;$/;"	v	file:
s_onTimeout	atchannel.cpp	/^static void (*s_onTimeout)(void) = NULL;$/;"	v	file:
s_raw_data	atchannel.cpp	/^static const char *s_raw_data = NULL;$/;"	v	file:
s_raw_len	atchannel.cpp	/^static size_t s_raw_len;$/;"	v	file:
s_readCount	atchannel.cpp	/^static int s_readCount = 0;$/;"	v	file:
s_readerClosed	atchannel.cpp	/^static int s_readerClosed;$/;"	v	file:
s_responsePrefix	atchannel.cpp	/^static const char *s_responsePrefix = NULL;$/;"	v	file:
s_smsPDU	atchannel.cpp	/^static const char *s_smsPDU = NULL;$/;"	v	file:
s_smsUnsoliciteds	atchannel.cpp	/^static const char * s_smsUnsoliciteds[] = {$/;"	v	file:
s_state_cond	ril-daemon.c	/^static pthread_cond_t s_state_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
s_state_cond	ril-daemon.cpp	/^static pthread_cond_t s_state_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
s_state_mutex	ril-daemon.c	/^static pthread_mutex_t s_state_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
s_state_mutex	ril-daemon.cpp	/^static pthread_mutex_t s_state_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
s_tid_reader	atchannel.cpp	/^static pthread_t s_tid_reader;$/;"	v	file:
s_timeoutMsec	atchannel.cpp	/^static long long s_timeoutMsec = 5000;$/;"	v	file:
s_type	atchannel.cpp	/^static ATCommandType s_type;$/;"	v	file:
s_unsolHandler	atchannel.cpp	/^static ATUnsolHandler s_unsolHandler;$/;"	v	file:
sahara_done	serialif.cpp	/^int sahara_done() {$/;"	f	signature:()
sahara_done	serialif.h	/^int sahara_done();$/;"	p
sahara_header_t	serialif.h	/^} __attribute__((packed))sahara_header_t;$/;"	t	typeref:struct:__anon29
sahara_main	firehose/qfirehose.c	/^int sahara_main(const char *firehose_dir, void *usb_handle);$/;"	p	file:	signature:(const char *firehose_dir, void *usb_handle)
sahara_main	firehose/sahara_protocol.c	/^int sahara_main(const char *firehose_dir, void *usb_handle) {$/;"	f	signature:(const char *firehose_dir, void *usb_handle)
sahara_packet_done	firehose/sahara_protocol.h	/^} sahara_packet_done;$/;"	t	typeref:struct:__anon21
sahara_packet_done_resp	firehose/sahara_protocol.h	/^} sahara_packet_done_resp;$/;"	t	typeref:struct:__anon22
sahara_packet_end_image_tx	firehose/sahara_protocol.h	/^} sahara_packet_end_image_tx;$/;"	t	typeref:struct:__anon20
sahara_packet_header	firehose/sahara_protocol.h	/^} sahara_packet_header;$/;"	t	typeref:struct:__anon15
sahara_packet_hello	firehose/sahara_protocol.h	/^} sahara_packet_hello;$/;"	t	typeref:struct:__anon16
sahara_packet_hello_resp	firehose/sahara_protocol.h	/^} sahara_packet_hello_resp;$/;"	t	typeref:struct:__anon17
sahara_packet_read_data	firehose/sahara_protocol.h	/^} sahara_packet_read_data;$/;"	t	typeref:struct:__anon18
sahara_packet_read_data_64bit	firehose/sahara_protocol.h	/^} sahara_packet_read_data_64bit;$/;"	t	typeref:struct:__anon19
sahara_packet_reset	firehose/sahara_protocol.h	/^} sahara_packet_reset;$/;"	t	typeref:struct:__anon23
sahara_packet_reset_resp	firehose/sahara_protocol.h	/^} sahara_packet_reset_resp;$/;"	t	typeref:struct:__anon24
sahara_reset	serialif.cpp	/^int sahara_reset() {$/;"	f	signature:()
sahara_reset	serialif.h	/^int sahara_reset();$/;"	p
sahara_rx_data	firehose/sahara_protocol.c	/^static int sahara_rx_data(void *usb_handle, void *rx_buffer, size_t bytes_to_read) {$/;"	f	file:	signature:(void *usb_handle, void *rx_buffer, size_t bytes_to_read)
sahara_start	firehose/sahara_protocol.c	/^static int sahara_start(void *usb_handle, void *tx_buffer, void *rx_buffer, FILE *file_handle) {$/;"	f	file:	signature:(void *usb_handle, void *tx_buffer, void *rx_buffer, FILE *file_handle)
sahara_tx_data	firehose/sahara_protocol.c	/^static int sahara_tx_data (void *usb_handle, void *tx_buffer, size_t bytes_to_send) {$/;"	f	file:	signature:(void *usb_handle, void *tx_buffer, size_t bytes_to_send)
save_log	download.h	/^int save_log(char *fmt,...);$/;"	p	signature:(char *fmt,...)
send_done_packet	firehose/sahara_protocol.c	/^static int send_done_packet (void *usb_handle, void *tx_buffer) {$/;"	f	file:	signature:(void *usb_handle, void *tx_buffer)
send_packet	serialif.cpp	/^static int send_packet(int flag) {$/;"	f	file:	signature:(int flag)
send_reset_command	firehose/sahara_protocol.c	/^static int send_reset_command (void *usb_handle, void *tx_buffer) {$/;"	f	file:	signature:(void *usb_handle, void *tx_buffer)
send_sahara_do_packet	serialif.cpp	/^int send_sahara_do_packet() {$/;"	f	signature:()
send_sahara_do_packet	serialif.h	/^int send_sahara_do_packet();$/;"	p
send_sahara_hello_response_packet	serialif.cpp	/^int send_sahara_hello_response_packet() {$/;"	f	signature:()
send_sahara_hello_response_packet	serialif.h	/^int send_sahara_hello_response_packet();$/;"	p
send_sync	serialif.cpp	/^target_current_state send_sync(void) {$/;"	f	signature:(void)
send_sync	serialif.h	/^target_current_state send_sync(void);$/;"	p	signature:(void)
send_tmp	serialif.cpp	/^static unsigned char send_tmp[2500];$/;"	v	file:
send_tmp_length	serialif.cpp	/^static int send_tmp_length = 0;$/;"	v	file:
serial	fastboot/fastboot.c	/^static const char *serial = 0;$/;"	v	file:
serial_number	fastboot/usb.h	/^    char serial_number[256];$/;"	m	struct:usb_ifc_info	access:public
serial_open	ril-daemon.c	/^static int serial_open(const char *device_path) {$/;"	f	file:	signature:(const char *device_path)
serial_open	ril-daemon.cpp	/^static int serial_open(const char *device_path) {$/;"	f	file:	signature:(const char *device_path)
setTimespecRelative	atchannel.cpp	/^static void setTimespecRelative(struct timespec *p_ts, long long msec) {$/;"	f	file:	signature:(struct timespec *p_ts, long long msec)
set_total	quectel_common.cpp	/^void transfer_statistics::set_total(long long all_files_size\/*kb*\/) {$/;"	f	class:transfer_statistics	signature:(long long all_files_size )
set_transfer_allbytes	firehose/qfirehose.c	/^void set_transfer_allbytes(long long bytes) {$/;"	f	signature:(long long bytes)
set_transfer_allbytes	firehose/usb_linux.h	/^void set_transfer_allbytes(long long bytes);$/;"	p	signature:(long long bytes)
set_write_bytes	quectel_common.cpp	/^void transfer_statistics::set_write_bytes(long long transfer_bytes) {$/;"	f	class:transfer_statistics	signature:(long long transfer_bytes)
setup_requirement_line	fastboot/fastboot.c	/^static int setup_requirement_line(char *name) {$/;"	f	file:	signature:(char *name)
setup_requirements	fastboot/fastboot.c	/^static void setup_requirements(char *data, unsigned sz) {$/;"	f	file:	signature:(char *data, unsigned sz)
show_log	os_linux.cpp	/^void show_log(const char *msg, ...) {$/;"	f	signature:(const char *msg, ...)
show_log	os_linux.h	/^void show_log(char *msg, ...);$/;"	p	signature:(char *msg, ...)
show_user_group_name	quectel_common.cpp	/^int show_user_group_name() {$/;"	f	signature:()
show_user_group_name	quectel_common.h	/^int show_user_group_name();$/;"	p
size	fastboot/engine.c	/^    unsigned size;$/;"	m	struct:Action	file:	access:public
skip	fastboot/fastboot.c	380;"	d	file:
skipComma	at_tok.c	/^int skipComma(char **p_cur) {$/;"	f	signature:(char **p_cur)
skipComma	at_tok.cpp	/^int skipComma(char **p_cur) {$/;"	f	signature:(char **p_cur)
skipComma	at_tok.h	/^int skipComma(char **p_cur);$/;"	p	signature:(char **p_cur)
skipNextComma	at_tok.c	/^static void skipNextComma(char **p_cur) {$/;"	f	file:	signature:(char **p_cur)
skipNextComma	at_tok.cpp	/^static void skipNextComma(char **p_cur) {$/;"	f	file:	signature:(char **p_cur)
skipWhiteSpace	at_tok.c	/^static void skipWhiteSpace(char **p_cur) {$/;"	f	file:	signature:(char **p_cur)
skipWhiteSpace	at_tok.cpp	/^static void skipWhiteSpace(char **p_cur) {$/;"	f	file:	signature:(char **p_cur)
sp_response	atchannel.cpp	/^static ATResponse *sp_response = NULL;$/;"	v	file:
stamp	tinyxmlparser.cpp	/^    const char*		stamp;$/;"	m	class:TiXmlParsingData	file:	access:private
start	fastboot/engine.c	/^    double start;$/;"	m	struct:Action	file:	access:public
start_image_transfer	firehose/sahara_protocol.c	/^static int start_image_transfer(void *usb_handle, void *tx_buffer, const sahara_packet_read_data *sahara_read_data, FILE *file_handle) {$/;"	f	file:	signature:(void *usb_handle, void *tx_buffer, const sahara_packet_read_data *sahara_read_data, FILE *file_handle)
start_my	serialif.cpp	/^timeval start_my,end_my;$/;"	v
start_sector	firehose/firehose_protocol.c	/^    uint32_t start_sector;$/;"	m	struct:fh_erase_cmd	file:	access:public
start_sector	firehose/firehose_protocol.c	/^    uint32_t start_sector;$/;"	m	struct:fh_program_cmd	file:	access:public
status	firehose/sahara_protocol.h	/^    uint32_t status;                  \/\/ OK or error condition$/;"	m	struct:__anon17	access:public
status	firehose/sahara_protocol.h	/^    uint32_t status;                  \/\/ OK or error condition$/;"	m	struct:__anon20	access:public
std	download.h	/^using namespace std;$/;"	v
std	platform_def.h	/^using namespace std;$/;"	v
strStartsWith	atchannel.cpp	/^static int strStartsWith(const char *line, const char *prefix) {$/;"	f	file:	signature:(const char *line, const char *prefix)
strToLower	quectel_common.cpp	/^void strToLower(char* src) {$/;"	f	signature:(char* src)
strToLower	quectel_common.h	/^void strToLower(char* src);$/;"	p	signature:(char* src)
strToUpper	quectel_common.cpp	/^void strToUpper(char* src) {$/;"	f	signature:(char* src)
strToUpper	quectel_common.h	/^void strToUpper(char* src);$/;"	p	signature:(char* src)
strip	fastboot/fastboot.c	/^static char *strip(char *s) {$/;"	f	file:	signature:(char *s)
success	atchannel.h	/^    int success;              \/* true if final response indicates$/;"	m	struct:__anon2	access:public
switch_emergency_download	serialif.cpp	/^int switch_emergency_download() {$/;"	f	signature:()
switch_emergency_download	serialif.h	/^int switch_emergency_download();$/;"	p
switch_to_dload	serialif.cpp	/^int switch_to_dload(void) {$/;"	f	signature:(void)
switch_to_dload	serialif.h	/^int switch_to_dload(void);$/;"	p	signature:(void)
switch_to_edl_mode	firehose/qfirehose.c	/^static void switch_to_edl_mode(void *usb_handle) {$/;"	f	file:	signature:(void *usb_handle)
system_ready	firehose/qfirehose.c	/^int system_ready(char** dirhose_dir) {$/;"	f	signature:(char** dirhose_dir)
tabsize	tinyxmlparser.cpp	/^    int				tabsize;$/;"	m	class:TiXmlParsingData	file:	access:private
target_current_state	download.h	/^} target_current_state;$/;"	t	typeref:enum:__anon5
target_platform	download.h	/^} target_platform;$/;"	t	typeref:enum:__anon6
tcp_socket_fd	firehose/usb_linux.c	/^static int tcp_socket_fd = -1;$/;"	v	file:
thread_id	firehose/usb2tcp.c	/^    pthread_t thread_id[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
transfer_bytes	firehose/qfirehose.c	/^static long long transfer_bytes = 0;		\/\/transfered bytes;$/;"	v	file:
transfer_nrpg_or_enpgr_file	serialif.h	/^int transfer_nrpg_or_enpgr_file();$/;"	p
transfer_prog_nand_firehose_file	serialif.cpp	/^int transfer_prog_nand_firehose_file(char * filename) {$/;"	f	signature:(char * filename)
transfer_prog_nand_firehose_file	serialif.h	/^int transfer_prog_nand_firehose_file(char * filename);$/;"	p	signature:(char * filename)
transfer_prog_nand_firehose_file1	serialif.cpp	/^int transfer_prog_nand_firehose_file1(char *filename) {$/;"	f	signature:(char *filename)
transfer_statistics	quectel_common.cpp	/^transfer_statistics::transfer_statistics() {$/;"	f	class:transfer_statistics	signature:()
transfer_statistics	quectel_common.cpp	/^transfer_statistics::transfer_statistics(const transfer_statistics&) {$/;"	f	class:transfer_statistics	signature:(const transfer_statistics&)
transfer_statistics::getInstance	quectel_common.cpp	/^transfer_statistics* transfer_statistics::getInstance() {$/;"	f	class:transfer_statistics	signature:()
transfer_statistics::get_percent	quectel_common.cpp	/^int transfer_statistics::get_percent() {$/;"	f	class:transfer_statistics	signature:()
transfer_statistics::instance	quectel_common.cpp	/^transfer_statistics* transfer_statistics::instance = 0;$/;"	m	class:transfer_statistics	file:
transfer_statistics::operator =	quectel_common.cpp	/^transfer_statistics& transfer_statistics::operator=(const transfer_statistics&) {$/;"	f	class:transfer_statistics	signature:(const transfer_statistics&)
transfer_statistics::set_total	quectel_common.cpp	/^void transfer_statistics::set_total(long long all_files_size\/*kb*\/) {$/;"	f	class:transfer_statistics	signature:(long long all_files_size )
transfer_statistics::set_write_bytes	quectel_common.cpp	/^void transfer_statistics::set_write_bytes(long long transfer_bytes) {$/;"	f	class:transfer_statistics	signature:(long long transfer_bytes)
transfer_statistics::transfer_statistics	quectel_common.cpp	/^transfer_statistics::transfer_statistics() {$/;"	f	class:transfer_statistics	signature:()
transfer_statistics::transfer_statistics	quectel_common.cpp	/^transfer_statistics::transfer_statistics(const transfer_statistics&) {$/;"	f	class:transfer_statistics	signature:(const transfer_statistics&)
ttyfd	firehose/usb2tcp.c	/^    int ttyfd;$/;"	m	struct:quectel_usb_device	file:	access:public
ttyfd	firehose/usb_linux.c	/^    int ttyfd;$/;"	m	struct:quectel_usb_device	file:	access:public
ttyusb_dev_detect	quectel_common.cpp	/^static int ttyusb_dev_detect(char** pp_diag_port, int interface) {$/;"	f	file:	signature:(char** pp_diag_port, int interface)
type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_cmd_header	file:	access:public
type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_configure_cmd	file:	access:public
type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_erase_cmd	file:	access:public
type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_log_cmd	file:	access:public
type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_program_cmd	file:	access:public
type	firehose/firehose_protocol.c	/^    const char *type;$/;"	m	struct:fh_response_cmd	file:	access:public
ufile_list	download.h	/^    vector<Ufile> ufile_list;$/;"	m	struct:__anon7	access:public
uint16	platform_def.h	/^typedef unsigned short	   uint16;$/;"	t
uint32	platform_def.h	/^typedef unsigned int 	   uint32;$/;"	t
update_method	download.h	/^    int update_method;$/;"	m	struct:__anon7	access:public
update_transfer_bytes	firehose/firehose_protocol.c	/^extern int update_transfer_bytes(long long bytes_cur);$/;"	p	file:	signature:(long long bytes_cur)
update_transfer_bytes	firehose/qfirehose.c	/^int update_transfer_bytes(long long bytes_cur) {$/;"	f	signature:(long long bytes_cur)
update_transfer_bytes	firehose/usb_linux.h	/^int update_transfer_bytes(long long bytes_cur);$/;"	p	signature:(long long bytes_cur)
upgrade_percent	file.cpp	/^double upgrade_percent() {$/;"	f	signature:()
upgrade_process	quectel_common.cpp	/^void upgrade_process(int writesize, int size, int clear) {$/;"	f	signature:(int writesize, int size, int clear)
upgrade_process	quectel_common.h	/^void upgrade_process(int writesize,int size,int clear);$/;"	p	signature:(int writesize,int size,int clear)
usage	fastboot/fastboot.c	/^static void usage(void) {$/;"	f	file:	signature:(void)
usage	firehose/qfirehose.c	/^void usage(int status) {$/;"	f	signature:(int status)
usage	os_linux.cpp	/^static void usage(const char *progname) {$/;"	f	file:	signature:(const char *progname)
usb	fastboot/fastboot.c	/^static usb_handle *usb = 0;$/;"	v	file:
usb_bulk_read_thread	firehose/usb2tcp.c	/^static void* usb_bulk_read_thread(void* arg) {$/;"	f	file:	signature:(void* arg)
usb_bulk_read_thread	firehose/usb_linux_firehose.c	/^static void* usb_bulk_read_thread(void* arg) {$/;"	f	file:	signature:(void* arg)
usb_close	fastboot/usb.h	/^int usb_close(usb_handle *h);$/;"	p	signature:(usb_handle *h)
usb_close	fastboot/usb_linux_fastboot.c	/^int usb_close(usb_handle *h) {$/;"	f	signature:(usb_handle *h)
usb_fullspeed	quectel_common.h	/^    usb_fullspeed,$/;"	e	enum:usb_speed
usb_handle	fastboot/usb.h	/^typedef struct usb_handle usb_handle;$/;"	t	typeref:struct:usb_handle
usb_handle	fastboot/usb_linux_fastboot.c	/^struct usb_handle {$/;"	s	file:
usb_handle	firehose/firehose_protocol.c	/^    const void *usb_handle;$/;"	m	struct:fh_data	file:	access:public
usb_handle::desc	fastboot/usb_linux_fastboot.c	/^    int desc;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::ep_in	fastboot/usb_linux_fastboot.c	/^    unsigned char ep_in;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::ep_out	fastboot/usb_linux_fastboot.c	/^    unsigned char ep_out;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::fname	fastboot/usb_linux_fastboot.c	/^    char fname[64];$/;"	m	struct:usb_handle	file:	access:public
usb_highspeed	quectel_common.h	/^    usb_highspeed,$/;"	e	enum:usb_speed
usb_ifc_info	fastboot/usb.h	/^struct usb_ifc_info {$/;"	s
usb_ifc_info	fastboot/usb.h	/^typedef struct usb_ifc_info usb_ifc_info;$/;"	t	typeref:struct:usb_ifc_info
usb_ifc_info::dev_class	fastboot/usb.h	/^    unsigned char dev_class;$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::dev_product	fastboot/usb.h	/^    unsigned short dev_product;$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::dev_protocol	fastboot/usb.h	/^    unsigned char dev_protocol;$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::dev_subclass	fastboot/usb.h	/^    unsigned char dev_subclass;$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::dev_vendor	fastboot/usb.h	/^    unsigned short dev_vendor;$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::device_path	fastboot/usb.h	/^    char device_path[256];$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::has_bulk_in	fastboot/usb.h	/^    unsigned char has_bulk_in;$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::has_bulk_out	fastboot/usb.h	/^    unsigned char has_bulk_out;$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::ifc_class	fastboot/usb.h	/^    unsigned char ifc_class;$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::ifc_protocol	fastboot/usb.h	/^    unsigned char ifc_protocol;$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::ifc_subclass	fastboot/usb.h	/^    unsigned char ifc_subclass;$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::serial_number	fastboot/usb.h	/^    char serial_number[256];$/;"	m	struct:usb_ifc_info	access:public
usb_ifc_info::writable	fastboot/usb.h	/^    unsigned char writable;$/;"	m	struct:usb_ifc_info	access:public
usb_kick	fastboot/usb_linux_fastboot.c	/^void usb_kick(usb_handle *h) {$/;"	f	signature:(usb_handle *h)
usb_open	fastboot/fastboot.c	/^extern usb_handle *usb_open(ifc_match_func callback);$/;"	p	file:	signature:(ifc_match_func callback)
usb_open	fastboot/usb.h	/^usb_handle *usb_open(ifc_match_func callback);$/;"	p	signature:(ifc_match_func callback)
usb_open	fastboot/usb_linux_fastboot.c	/^usb_handle *usb_open(ifc_match_func callback) {$/;"	f	signature:(ifc_match_func callback)
usb_read	fastboot/usb.h	/^int usb_read(usb_handle *h, void *_data, int len);$/;"	p	signature:(usb_handle *h, void *_data, int len)
usb_read	fastboot/usb_linux_fastboot.c	/^int usb_read(usb_handle *h, void *_data, int len) {$/;"	f	signature:(usb_handle *h, void *_data, int len)
usb_speed	quectel_common.h	/^enum usb_speed {$/;"	g
usb_superspeed	quectel_common.h	/^    usb_superspeed$/;"	e	enum:usb_speed
usb_write	fastboot/usb.h	/^int usb_write(usb_handle *h, const void *_data, int len, int fd);$/;"	p	signature:(usb_handle *h, const void *_data, int len, int fd)
usb_write	fastboot/usb_linux_fastboot.c	/^int usb_write(usb_handle *h, const void *_data, int len, int fd) {$/;"	f	signature:(usb_handle *h, const void *_data, int len, int fd)
usbfs_bulk_read	firehose/usb2tcp.c	/^static int usbfs_bulk_read(struct quectel_usb_device *udev, int bInterfaceNumber, const void *data, int len) {$/;"	f	file:	signature:(struct quectel_usb_device *udev, int bInterfaceNumber, const void *data, int len)
usbfs_bulk_read	firehose/usb_linux.c	/^static int usbfs_bulk_read(struct quectel_usb_device *udev, void *pbuf, int len, int timeout) {$/;"	f	file:	signature:(struct quectel_usb_device *udev, void *pbuf, int len, int timeout)
usbfs_bulk_read	firehose/usb_linux_firehose.c	/^static int usbfs_bulk_read(struct ec20_usb_device *udev, int bInterfaceNumber, const void *data, int len) {$/;"	f	file:	signature:(struct ec20_usb_device *udev, int bInterfaceNumber, const void *data, int len)
usbfs_bulk_write	firehose/usb2tcp.c	/^static int usbfs_bulk_write(struct quectel_usb_device *udev, int bInterfaceNumber, const void *data, int len, int need_zlp) {$/;"	f	file:	signature:(struct quectel_usb_device *udev, int bInterfaceNumber, const void *data, int len, int need_zlp)
usbfs_bulk_write	firehose/usb_linux.c	/^static int usbfs_bulk_write(struct quectel_usb_device *udev, const void *data, int len, int timeout_msec, int need_zlp) {$/;"	f	file:	signature:(struct quectel_usb_device *udev, const void *data, int len, int timeout_msec, int need_zlp)
usbfs_bulk_write	firehose/usb_linux_firehose.c	/^static int usbfs_bulk_write(struct ec20_usb_device *udev, int bInterfaceNumber, const void *data, int len, int need_zlp) {$/;"	f	file:	signature:(struct ec20_usb_device *udev, int bInterfaceNumber, const void *data, int len, int need_zlp)
usbfs_flag	firehose/usb_linux.c	/^int usbfs_flag = 0;$/;"	v
utf8ByteTable	tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = {$/;"	m	class:TiXmlBase	file:
value	firehose/firehose_protocol.c	/^    const char *value;$/;"	m	struct:fh_response_cmd	file:	access:public
vendor_id	fastboot/fastboot.c	/^static unsigned short vendor_id = 0;$/;"	v	file:
version	firehose/sahara_protocol.h	/^    uint32_t version;                 \/\/ host protocol version number$/;"	m	struct:__anon17	access:public
version	firehose/sahara_protocol.h	/^    uint32_t version;                 \/\/ target protocol version number$/;"	m	struct:__anon16	access:public
version	serialif.h	/^    unsigned char version;$/;"	m	struct:__anon25	access:public
version_supported	firehose/sahara_protocol.h	/^    uint32_t version_supported;       \/\/ minimum protocol version number supported$/;"	m	struct:__anon16	access:public
version_supported	firehose/sahara_protocol.h	/^    uint32_t version_supported;       \/\/ minimum protocol version number supported$/;"	m	struct:__anon17	access:public
vertifyAllnum	download.cpp	/^int vertifyAllnum(char* ch) {$/;"	f	signature:(char* ch)
wMaxPacketSize	download.cpp	/^    __le16 wMaxPacketSize[QL_MAX_INF];$/;"	m	struct:ql_usb_device	file:	access:public
wMaxPacketSize	firehose/usb2tcp.c	/^    int wMaxPacketSize[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
wMaxPacketSize	firehose/usb_linux.c	/^    int wMaxPacketSize[EC20_MAX_INF];$/;"	m	struct:quectel_usb_device	file:	access:public
wMaxPacketSize	firehose/usb_linux_firehose.c	/^    __le16 wMaxPacketSize[EC20_MAX_INF];$/;"	m	struct:ec20_usb_device	file:	access:public
waitForClose	ril-daemon.c	/^static void waitForClose() {$/;"	f	file:
waitForClose	ril-daemon.cpp	/^static void waitForClose() {$/;"	f	file:	signature:()
wait_adb	quectel_common.cpp	/^int wait_adb(int timeout) {$/;"	f	signature:(int timeout)
wait_adb	quectel_common.h	/^int wait_adb(int timeout);$/;"	p	signature:(int timeout)
wait_client_connect	firehose/usb2tcp.c	/^static int wait_client_connect(int server_fd) {$/;"	f	file:	signature:(int server_fd)
wait_diag_port_disconnect	quectel_common.cpp	/^int wait_diag_port_disconnect(int timeout) {$/;"	f	signature:(int timeout)
wait_diag_port_disconnect	quectel_common.h	/^int wait_diag_port_disconnect(int timeout \/*s*\/);$/;"	p	signature:(int timeout )
wipe_data	fastboot/fastboot.c	/^static int wipe_data = 0;$/;"	v	file:
writable	fastboot/usb.h	/^    unsigned char writable;$/;"	m	struct:usb_ifc_info	access:public
writeCtrlZ	atchannel.cpp	/^static int writeCtrlZ (const char *s) {$/;"	f	file:	signature:(const char *s)
writeCtrlZ	atchannel.cpp	/^static int writeCtrlZ (const char *s);$/;"	p	file:	signature:(const char *s)
writeFile	file.cpp	/^int writeFile(double updatePercent) {$/;"	f	signature:(double updatePercent)
writeFile	file.h	/^int writeFile(double updatePercent);$/;"	p	signature:(double updatePercent)
writeline	atchannel.cpp	/^static int writeline (const char *s) {$/;"	f	file:	signature:(const char *s)
writeline	atchannel.cpp	/^static int writeline (const char *s);$/;"	p	file:	signature:(const char *s)
writeraw	atchannel.cpp	/^static int writeraw (const char *s, size_t len) {$/;"	f	file:	signature:(const char *s, size_t len)
writeraw	atchannel.cpp	/^static int writeraw (const char *s, size_t len);$/;"	p	file:	signature:(const char *s, size_t len)
xml_buf	firehose/firehose_protocol.c	/^    char xml_buf[1024];$/;"	m	struct:fh_data	file:	access:public
xml_size	firehose/firehose_protocol.c	/^    unsigned xml_size;$/;"	m	struct:fh_data	file:	access:public
~TiXmlAttributeSet	tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet() {$/;"	f	class:TiXmlAttributeSet	signature:()
~TiXmlElement	tinyxml.cpp	/^TiXmlElement::~TiXmlElement() {$/;"	f	class:TiXmlElement	signature:()
~TiXmlNode	tinyxml.cpp	/^TiXmlNode::~TiXmlNode() {$/;"	f	class:TiXmlNode	signature:()
